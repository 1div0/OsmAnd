/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.osmand.core.jni;

public class Utilities {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Utilities(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Utilities obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
  }

  public static double toRadians(double angle) {
    return OsmAndCoreJNI.Utilities_toRadians(angle);
  }

  public static int get31TileNumberX(double longitude) {
    return OsmAndCoreJNI.Utilities_get31TileNumberX(longitude);
  }

  public static int get31TileNumberY(double latitude) {
    return OsmAndCoreJNI.Utilities_get31TileNumberY(latitude);
  }

  public static PointI convertLatLonTo31(LatLon latLon) {
    return new PointI(OsmAndCoreJNI.Utilities_convertLatLonTo31(LatLon.getCPtr(latLon), latLon), true);
  }

  public static double get31LongitudeX(double x) {
    return OsmAndCoreJNI.Utilities_get31LongitudeX(x);
  }

  public static double get31LatitudeY(double y) {
    return OsmAndCoreJNI.Utilities_get31LatitudeY(y);
  }

  public static LatLon convert31ToLatLon(PointI point31) {
    return new LatLon(OsmAndCoreJNI.Utilities_convert31ToLatLon(PointI.getCPtr(point31), point31), true);
  }

  public static double getTileNumberX(float zoom, double longitude) {
    return OsmAndCoreJNI.Utilities_getTileNumberX(zoom, longitude);
  }

  public static double getTileNumberY(float zoom, double latitude) {
    return OsmAndCoreJNI.Utilities_getTileNumberY(zoom, latitude);
  }

  public static float convert31toFloat(int value, ZoomLevel zoom) {
    return OsmAndCoreJNI.Utilities_convert31toFloat__SWIG_0(value, zoom.swigValue());
  }

  public static PointF convert31toFloat(PointI p, ZoomLevel zoom) {
    return new PointF(OsmAndCoreJNI.Utilities_convert31toFloat__SWIG_1(PointI.getCPtr(p), p, zoom.swigValue()), true);
  }

  public static double normalizeLatitude(double latitude) {
    return OsmAndCoreJNI.Utilities_normalizeLatitude(latitude);
  }

  public static double normalizeLongitude(double longitude) {
    return OsmAndCoreJNI.Utilities_normalizeLongitude(longitude);
  }

  public static double getPowZoom(float zoom) {
    return OsmAndCoreJNI.Utilities_getPowZoom(zoom);
  }

  public static double getLongitudeFromTile(float zoom, double x) {
    return OsmAndCoreJNI.Utilities_getLongitudeFromTile(zoom, x);
  }

  public static double getLatitudeFromTile(float zoom, double y) {
    return OsmAndCoreJNI.Utilities_getLatitudeFromTile(zoom, y);
  }

  public static double x31toMeters(int x31) {
    return OsmAndCoreJNI.Utilities_x31toMeters(x31);
  }

  public static double y31toMeters(int y31) {
    return OsmAndCoreJNI.Utilities_y31toMeters(y31);
  }

  public static long metersToX31(double meters) {
    return OsmAndCoreJNI.Utilities_metersToX31(meters);
  }

  public static long metersToY31(double meters) {
    return OsmAndCoreJNI.Utilities_metersToY31(meters);
  }

  public static double squareDistance31(int x31a, int y31a, int x31b, int y31b) {
    return OsmAndCoreJNI.Utilities_squareDistance31__SWIG_0(x31a, y31a, x31b, y31b);
  }

  public static double distance31(int x31a, int y31a, int x31b, int y31b) {
    return OsmAndCoreJNI.Utilities_distance31__SWIG_0(x31a, y31a, x31b, y31b);
  }

  public static double squareDistance31(PointI a, PointI b) {
    return OsmAndCoreJNI.Utilities_squareDistance31__SWIG_1(PointI.getCPtr(a), a, PointI.getCPtr(b), b);
  }

  public static double distance31(PointI a, PointI b) {
    return OsmAndCoreJNI.Utilities_distance31__SWIG_1(PointI.getCPtr(a), a, PointI.getCPtr(b), b);
  }

  public static double distance(double xLonA, double yLatA, double xLonB, double yLatB) {
    return OsmAndCoreJNI.Utilities_distance(xLonA, yLatA, xLonB, yLatB);
  }

  public static double projection31(int x31a, int y31a, int x31b, int y31b, int x31c, int y31c) {
    return OsmAndCoreJNI.Utilities_projection31(x31a, y31a, x31b, y31b, x31c, y31c);
  }

  public static double normalizedAngleRadians(double angle) {
    return OsmAndCoreJNI.Utilities_normalizedAngleRadians(angle);
  }

  public static double normalizedAngleDegrees(double angle) {
    return OsmAndCoreJNI.Utilities_normalizedAngleDegrees(angle);
  }

  public static double polygonArea(SWIGTYPE_p_QVectorT_OsmAnd__PointT_int32_t_t_t points) {
    return OsmAndCoreJNI.Utilities_polygonArea(SWIGTYPE_p_QVectorT_OsmAnd__PointT_int32_t_t_t.getCPtr(points));
  }

  public static boolean rayIntersectX(PointF v0_, PointF v1_, float mY, SWIGTYPE_p_float mX) {
    return OsmAndCoreJNI.Utilities_rayIntersectX__SWIG_0(PointF.getCPtr(v0_), v0_, PointF.getCPtr(v1_), v1_, mY, SWIGTYPE_p_float.getCPtr(mX));
  }

  public static boolean rayIntersect(PointF v0, PointF v1, PointF v) {
    return OsmAndCoreJNI.Utilities_rayIntersect__SWIG_0(PointF.getCPtr(v0), v0, PointF.getCPtr(v1), v1, PointF.getCPtr(v), v);
  }

  public static boolean rayIntersectX(PointI v0_, PointI v1_, int mY, SWIGTYPE_p_int mX) {
    return OsmAndCoreJNI.Utilities_rayIntersectX__SWIG_1(PointI.getCPtr(v0_), v0_, PointI.getCPtr(v1_), v1_, mY, SWIGTYPE_p_int.getCPtr(mX));
  }

  public static boolean rayIntersect(PointI v0, PointI v1, PointI v) {
    return OsmAndCoreJNI.Utilities_rayIntersect__SWIG_1(PointI.getCPtr(v0), v0, PointI.getCPtr(v1), v1, PointI.getCPtr(v), v);
  }

  public static double degreesDiff(double a1, double a2) {
    return OsmAndCoreJNI.Utilities_degreesDiff(a1, a2);
  }

  public static AreaI tileBoundingBox31(TileId tileId, ZoomLevel zoom) {
    return new AreaI(OsmAndCoreJNI.Utilities_tileBoundingBox31(TileId.getCPtr(tileId), tileId, zoom.swigValue()), true);
  }

  public static AreaI areaRightShift(AreaI input, long shift) {
    return new AreaI(OsmAndCoreJNI.Utilities_areaRightShift(AreaI.getCPtr(input), input, shift), true);
  }

  public static AreaI areaLeftShift(AreaI input, long shift) {
    return new AreaI(OsmAndCoreJNI.Utilities_areaLeftShift(AreaI.getCPtr(input), input, shift), true);
  }

  public static long getNextPowerOfTwo(long value) {
    return OsmAndCoreJNI.Utilities_getNextPowerOfTwo(value);
  }

  public static double getMetersPerTileUnit(float zoom, double yTile, double unitsPerTile) {
    return OsmAndCoreJNI.Utilities_getMetersPerTileUnit(zoom, yTile, unitsPerTile);
  }

  public static TileId normalizeTileId(TileId input, ZoomLevel zoom) {
    return new TileId(OsmAndCoreJNI.Utilities_normalizeTileId(TileId.getCPtr(input), input, zoom.swigValue()), true);
  }

  public static PointI normalizeCoordinates(PointI input, ZoomLevel zoom) {
    return new PointI(OsmAndCoreJNI.Utilities_normalizeCoordinates(PointI.getCPtr(input), input, zoom.swigValue()), true);
  }

  public static short computeCohenSutherlandCode(PointI p, AreaI box) {
    return OsmAndCoreJNI.Utilities_computeCohenSutherlandCode(PointI.getCPtr(p), p, AreaI.getCPtr(box), box);
  }

  public static boolean extractFirstNumberPosition(String value, SWIGTYPE_p_int first, SWIGTYPE_p_int last, boolean allowSigned, boolean allowDot) {
    return OsmAndCoreJNI.Utilities_extractFirstNumberPosition(value, SWIGTYPE_p_int.getCPtr(first), SWIGTYPE_p_int.getCPtr(last), allowSigned, allowDot);
  }

  public static double parseSpeed(String value, double defValue, SWIGTYPE_p_bool wasParsed) {
    return OsmAndCoreJNI.Utilities_parseSpeed__SWIG_0(value, defValue, SWIGTYPE_p_bool.getCPtr(wasParsed));
  }

  public static double parseSpeed(String value, double defValue) {
    return OsmAndCoreJNI.Utilities_parseSpeed__SWIG_1(value, defValue);
  }

  public static double parseLength(String value, double defValue, SWIGTYPE_p_bool wasParsed) {
    return OsmAndCoreJNI.Utilities_parseLength__SWIG_0(value, defValue, SWIGTYPE_p_bool.getCPtr(wasParsed));
  }

  public static double parseLength(String value, double defValue) {
    return OsmAndCoreJNI.Utilities_parseLength__SWIG_1(value, defValue);
  }

  public static double parseWeight(String value, double defValue, SWIGTYPE_p_bool wasParsed) {
    return OsmAndCoreJNI.Utilities_parseWeight__SWIG_0(value, defValue, SWIGTYPE_p_bool.getCPtr(wasParsed));
  }

  public static double parseWeight(String value, double defValue) {
    return OsmAndCoreJNI.Utilities_parseWeight__SWIG_1(value, defValue);
  }

  public static ColorARGB parseColor(String value, ColorARGB defValue, SWIGTYPE_p_bool wasParsed) {
    return new ColorARGB(OsmAndCoreJNI.Utilities_parseColor__SWIG_0(value, ColorARGB.getCPtr(defValue), defValue, SWIGTYPE_p_bool.getCPtr(wasParsed)), true);
  }

  public static ColorARGB parseColor(String value, ColorARGB defValue) {
    return new ColorARGB(OsmAndCoreJNI.Utilities_parseColor__SWIG_1(value, ColorARGB.getCPtr(defValue), defValue), true);
  }

  public static int parseArbitraryInt(String value, int defValue, SWIGTYPE_p_bool wasParsed) {
    return OsmAndCoreJNI.Utilities_parseArbitraryInt__SWIG_0(value, defValue, SWIGTYPE_p_bool.getCPtr(wasParsed));
  }

  public static int parseArbitraryInt(String value, int defValue) {
    return OsmAndCoreJNI.Utilities_parseArbitraryInt__SWIG_1(value, defValue);
  }

  public static int parseArbitraryLong(String value, int defValue, SWIGTYPE_p_bool wasParsed) {
    return OsmAndCoreJNI.Utilities_parseArbitraryLong__SWIG_0(value, defValue, SWIGTYPE_p_bool.getCPtr(wasParsed));
  }

  public static int parseArbitraryLong(String value, int defValue) {
    return OsmAndCoreJNI.Utilities_parseArbitraryLong__SWIG_1(value, defValue);
  }

  public static long parseArbitraryUInt(String value, long defValue, SWIGTYPE_p_bool wasParsed) {
    return OsmAndCoreJNI.Utilities_parseArbitraryUInt__SWIG_0(value, defValue, SWIGTYPE_p_bool.getCPtr(wasParsed));
  }

  public static long parseArbitraryUInt(String value, long defValue) {
    return OsmAndCoreJNI.Utilities_parseArbitraryUInt__SWIG_1(value, defValue);
  }

  public static long parseArbitraryULong(String value, long defValue, SWIGTYPE_p_bool wasParsed) {
    return OsmAndCoreJNI.Utilities_parseArbitraryULong__SWIG_0(value, defValue, SWIGTYPE_p_bool.getCPtr(wasParsed));
  }

  public static long parseArbitraryULong(String value, long defValue) {
    return OsmAndCoreJNI.Utilities_parseArbitraryULong__SWIG_1(value, defValue);
  }

  public static float parseArbitraryFloat(String value, float defValue, SWIGTYPE_p_bool wasParsed) {
    return OsmAndCoreJNI.Utilities_parseArbitraryFloat__SWIG_0(value, defValue, SWIGTYPE_p_bool.getCPtr(wasParsed));
  }

  public static float parseArbitraryFloat(String value, float defValue) {
    return OsmAndCoreJNI.Utilities_parseArbitraryFloat__SWIG_1(value, defValue);
  }

  public static boolean parseArbitraryBool(String value, boolean defValue, SWIGTYPE_p_bool wasParsed) {
    return OsmAndCoreJNI.Utilities_parseArbitraryBool__SWIG_0(value, defValue, SWIGTYPE_p_bool.getCPtr(wasParsed));
  }

  public static boolean parseArbitraryBool(String value, boolean defValue) {
    return OsmAndCoreJNI.Utilities_parseArbitraryBool__SWIG_1(value, defValue);
  }

  public static int javaDoubleCompare(double l, double r) {
    return OsmAndCoreJNI.Utilities_javaDoubleCompare(l, r);
  }

  public static void findFiles(SWIGTYPE_p_QDir origin, SWIGTYPE_p_QStringList masks, SWIGTYPE_p_QFileInfoList files, boolean recursively) {
    OsmAndCoreJNI.Utilities_findFiles__SWIG_0(SWIGTYPE_p_QDir.getCPtr(origin), SWIGTYPE_p_QStringList.getCPtr(masks), SWIGTYPE_p_QFileInfoList.getCPtr(files), recursively);
  }

  public static void findFiles(SWIGTYPE_p_QDir origin, SWIGTYPE_p_QStringList masks, SWIGTYPE_p_QFileInfoList files) {
    OsmAndCoreJNI.Utilities_findFiles__SWIG_1(SWIGTYPE_p_QDir.getCPtr(origin), SWIGTYPE_p_QStringList.getCPtr(masks), SWIGTYPE_p_QFileInfoList.getCPtr(files));
  }

  public static void findDirectories(SWIGTYPE_p_QDir origin, SWIGTYPE_p_QStringList masks, SWIGTYPE_p_QFileInfoList directories, boolean recursively) {
    OsmAndCoreJNI.Utilities_findDirectories__SWIG_0(SWIGTYPE_p_QDir.getCPtr(origin), SWIGTYPE_p_QStringList.getCPtr(masks), SWIGTYPE_p_QFileInfoList.getCPtr(directories), recursively);
  }

  public static void findDirectories(SWIGTYPE_p_QDir origin, SWIGTYPE_p_QStringList masks, SWIGTYPE_p_QFileInfoList directories) {
    OsmAndCoreJNI.Utilities_findDirectories__SWIG_1(SWIGTYPE_p_QDir.getCPtr(origin), SWIGTYPE_p_QStringList.getCPtr(masks), SWIGTYPE_p_QFileInfoList.getCPtr(directories));
  }

  public static void scanlineFillPolygon(long verticesCount, PointF vertices, SWIGTYPE_p_std__functionT_void_fOsmAnd__PointT_int_t_const_RF_t fillPoint) {
    OsmAndCoreJNI.Utilities_scanlineFillPolygon(verticesCount, PointF.getCPtr(vertices), vertices, SWIGTYPE_p_std__functionT_void_fOsmAnd__PointT_int_t_const_RF_t.getCPtr(fillPoint));
  }

  public static SWIGTYPE_p_QSetT_OsmAnd__ZoomLevel_t enumerateZoomLevels(ZoomLevel from, ZoomLevel to) {
    return new SWIGTYPE_p_QSetT_OsmAnd__ZoomLevel_t(OsmAndCoreJNI.Utilities_enumerateZoomLevels(from.swigValue(), to.swigValue()), true);
  }

  public static String stringifyZoomLevels(SWIGTYPE_p_QSetT_OsmAnd__ZoomLevel_t zoomLevels) {
    return OsmAndCoreJNI.Utilities_stringifyZoomLevels(SWIGTYPE_p_QSetT_OsmAnd__ZoomLevel_t.getCPtr(zoomLevels));
  }

  public enum CHCode {
    Inside(OsmAndCoreJNI.Utilities_CHCode_Inside_get()),
    Left(OsmAndCoreJNI.Utilities_CHCode_Left_get()),
    Right(OsmAndCoreJNI.Utilities_CHCode_Right_get()),
    Bottom(OsmAndCoreJNI.Utilities_CHCode_Bottom_get()),
    Top(OsmAndCoreJNI.Utilities_CHCode_Top_get());

    public final int swigValue() {
      return swigValue;
    }

    public static CHCode swigToEnum(int swigValue) {
      CHCode[] swigValues = CHCode.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (CHCode swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + CHCode.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private CHCode() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private CHCode(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private CHCode(CHCode swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}

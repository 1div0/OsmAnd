/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.osmand.core.jni;

public class MapSymbolsGroup {
  private long swigCPtr;
  private boolean swigCMemOwn;

  protected MapSymbolsGroup(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MapSymbolsGroup obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OsmAndCoreJNI.delete_MapSymbolsGroup(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  static public class AdditionalInstance {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected AdditionalInstance(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(AdditionalInstance obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsmAndCoreJNI.delete_MapSymbolsGroup_AdditionalInstance(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public AdditionalInstance(MapSymbolsGroup originalGroup) {
      this(OsmAndCoreJNI.new_MapSymbolsGroup_AdditionalInstance(MapSymbolsGroup.getCPtr(originalGroup), originalGroup), true);
    }
  
    public SWIGTYPE_p_std__weak_ptrT_OsmAnd__MapSymbolsGroup_t getOriginalGroup() {
      long cPtr = OsmAndCoreJNI.MapSymbolsGroup_AdditionalInstance_originalGroup_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_std__weak_ptrT_OsmAnd__MapSymbolsGroup_t(cPtr, false);
    }
  
    public void setSymbols(SWIGTYPE_p_QHashT_std__shared_ptrT_OsmAnd__MapSymbol_t_std__shared_ptrT_OsmAnd__MapSymbolsGroup__AdditionalSymbolInstanceParameters_t_t value) {
      OsmAndCoreJNI.MapSymbolsGroup_AdditionalInstance_symbols_set(swigCPtr, this, SWIGTYPE_p_QHashT_std__shared_ptrT_OsmAnd__MapSymbol_t_std__shared_ptrT_OsmAnd__MapSymbolsGroup__AdditionalSymbolInstanceParameters_t_t.getCPtr(value));
    }
  
    public SWIGTYPE_p_QHashT_std__shared_ptrT_OsmAnd__MapSymbol_t_std__shared_ptrT_OsmAnd__MapSymbolsGroup__AdditionalSymbolInstanceParameters_t_t getSymbols() {
      long cPtr = OsmAndCoreJNI.MapSymbolsGroup_AdditionalInstance_symbols_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_QHashT_std__shared_ptrT_OsmAnd__MapSymbol_t_std__shared_ptrT_OsmAnd__MapSymbolsGroup__AdditionalSymbolInstanceParameters_t_t(cPtr, false);
    }
  
    public MapSymbol getFirstSymbolWithContentClass(MapSymbol.ContentClass contentClass) {
      long cPtr = OsmAndCoreJNI.MapSymbolsGroup_AdditionalInstance_getFirstSymbolWithContentClass(swigCPtr, this, contentClass.swigValue());
      return (cPtr == 0) ? null : new MapSymbol(cPtr, true);
    }
  
    public long numberOfSymbolsWithContentClass(MapSymbol.ContentClass contentClass) {
      return OsmAndCoreJNI.MapSymbolsGroup_AdditionalInstance_numberOfSymbolsWithContentClass(swigCPtr, this, contentClass.swigValue());
    }
  
  }

  static public class AdditionalSymbolInstanceParameters {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected AdditionalSymbolInstanceParameters(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(AdditionalSymbolInstanceParameters obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsmAndCoreJNI.delete_MapSymbolsGroup_AdditionalSymbolInstanceParameters(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public AdditionalSymbolInstanceParameters(MapSymbolsGroup.AdditionalInstance groupInstancePtr) {
      this(OsmAndCoreJNI.new_MapSymbolsGroup_AdditionalSymbolInstanceParameters(MapSymbolsGroup.AdditionalInstance.getCPtr(groupInstancePtr), groupInstancePtr), true);
    }
  
    public MapSymbolsGroup.AdditionalInstance getGroupInstancePtr() {
      long cPtr = OsmAndCoreJNI.MapSymbolsGroup_AdditionalSymbolInstanceParameters_groupInstancePtr_get(swigCPtr, this);
      return (cPtr == 0) ? null : new MapSymbolsGroup.AdditionalInstance(cPtr, false);
    }
  
  }

  static public class AdditionalBillboardSymbolInstanceParameters extends MapSymbolsGroup.AdditionalSymbolInstanceParameters {
    private long swigCPtr;
  
    protected AdditionalBillboardSymbolInstanceParameters(long cPtr, boolean cMemoryOwn) {
      super(OsmAndCoreJNI.MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_SWIGUpcast(cPtr), cMemoryOwn);
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(AdditionalBillboardSymbolInstanceParameters obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsmAndCoreJNI.delete_MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters(swigCPtr);
        }
        swigCPtr = 0;
      }
      super.delete();
    }
  
    public AdditionalBillboardSymbolInstanceParameters(MapSymbolsGroup.AdditionalInstance groupInstancePtr) {
      this(OsmAndCoreJNI.new_MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters(MapSymbolsGroup.AdditionalInstance.getCPtr(groupInstancePtr), groupInstancePtr), true);
    }
  
    public void setOverridesPosition31(boolean value) {
      OsmAndCoreJNI.MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_overridesPosition31_set(swigCPtr, this, value);
    }
  
    public boolean getOverridesPosition31() {
      return OsmAndCoreJNI.MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_overridesPosition31_get(swigCPtr, this);
    }
  
    public void setPosition31(PointI value) {
      OsmAndCoreJNI.MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_position31_set(swigCPtr, this, PointI.getCPtr(value), value);
    }
  
    public PointI getPosition31() {
      long cPtr = OsmAndCoreJNI.MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_position31_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PointI(cPtr, false);
    }
  
    public void setOverridesOffset(boolean value) {
      OsmAndCoreJNI.MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_overridesOffset_set(swigCPtr, this, value);
    }
  
    public boolean getOverridesOffset() {
      return OsmAndCoreJNI.MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_overridesOffset_get(swigCPtr, this);
    }
  
    public void setOffset(PointI value) {
      OsmAndCoreJNI.MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_offset_set(swigCPtr, this, PointI.getCPtr(value), value);
    }
  
    public PointI getOffset() {
      long cPtr = OsmAndCoreJNI.MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_offset_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PointI(cPtr, false);
    }
  
  }

  static public class AdditionalOnSurfaceSymbolInstanceParameters extends MapSymbolsGroup.AdditionalSymbolInstanceParameters {
    private long swigCPtr;
  
    protected AdditionalOnSurfaceSymbolInstanceParameters(long cPtr, boolean cMemoryOwn) {
      super(OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_SWIGUpcast(cPtr), cMemoryOwn);
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(AdditionalOnSurfaceSymbolInstanceParameters obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsmAndCoreJNI.delete_MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters(swigCPtr);
        }
        swigCPtr = 0;
      }
      super.delete();
    }
  
    public AdditionalOnSurfaceSymbolInstanceParameters(MapSymbolsGroup.AdditionalInstance groupInstancePtr) {
      this(OsmAndCoreJNI.new_MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters(MapSymbolsGroup.AdditionalInstance.getCPtr(groupInstancePtr), groupInstancePtr), true);
    }
  
    public void setOverridesPosition31(boolean value) {
      OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_overridesPosition31_set(swigCPtr, this, value);
    }
  
    public boolean getOverridesPosition31() {
      return OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_overridesPosition31_get(swigCPtr, this);
    }
  
    public void setPosition31(PointI value) {
      OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_position31_set(swigCPtr, this, PointI.getCPtr(value), value);
    }
  
    public PointI getPosition31() {
      long cPtr = OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_position31_get(swigCPtr, this);
      return (cPtr == 0) ? null : new PointI(cPtr, false);
    }
  
    public void setOverridesDirection(boolean value) {
      OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_overridesDirection_set(swigCPtr, this, value);
    }
  
    public boolean getOverridesDirection() {
      return OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_overridesDirection_get(swigCPtr, this);
    }
  
    public void setDirection(float value) {
      OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_direction_set(swigCPtr, this, value);
    }
  
    public float getDirection() {
      return OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_direction_get(swigCPtr, this);
    }
  
  }

  static public class AdditionalOnPathSymbolInstanceParameters extends MapSymbolsGroup.AdditionalSymbolInstanceParameters {
    private long swigCPtr;
  
    protected AdditionalOnPathSymbolInstanceParameters(long cPtr, boolean cMemoryOwn) {
      super(OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters_SWIGUpcast(cPtr), cMemoryOwn);
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(AdditionalOnPathSymbolInstanceParameters obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsmAndCoreJNI.delete_MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters(swigCPtr);
        }
        swigCPtr = 0;
      }
      super.delete();
    }
  
    public AdditionalOnPathSymbolInstanceParameters(MapSymbolsGroup.AdditionalInstance groupInstancePtr) {
      this(OsmAndCoreJNI.new_MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters(MapSymbolsGroup.AdditionalInstance.getCPtr(groupInstancePtr), groupInstancePtr), true);
    }
  
    public void setOverridesPinPointOnPath(boolean value) {
      OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters_overridesPinPointOnPath_set(swigCPtr, this, value);
    }
  
    public boolean getOverridesPinPointOnPath() {
      return OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters_overridesPinPointOnPath_get(swigCPtr, this);
    }
  
    public void setPinPointOnPath(SWIGTYPE_p_IOnPathMapSymbol__PinPoint value) {
      OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters_pinPointOnPath_set(swigCPtr, this, SWIGTYPE_p_IOnPathMapSymbol__PinPoint.getCPtr(value));
    }
  
    public SWIGTYPE_p_IOnPathMapSymbol__PinPoint getPinPointOnPath() {
      return new SWIGTYPE_p_IOnPathMapSymbol__PinPoint(OsmAndCoreJNI.MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters_pinPointOnPath_get(swigCPtr, this), true);
    }
  
  }

  public MapSymbolsGroup() {
    this(OsmAndCoreJNI.new_MapSymbolsGroup(), true);
  }

  public void setPresentationMode(SWIGTYPE_p_OsmAnd__BitmaskT_OsmAnd__MapSymbolsGroup__PresentationModeFlag_unsigned_int_t value) {
    OsmAndCoreJNI.MapSymbolsGroup_presentationMode_set(swigCPtr, this, SWIGTYPE_p_OsmAnd__BitmaskT_OsmAnd__MapSymbolsGroup__PresentationModeFlag_unsigned_int_t.getCPtr(value));
  }

  public SWIGTYPE_p_OsmAnd__BitmaskT_OsmAnd__MapSymbolsGroup__PresentationModeFlag_unsigned_int_t getPresentationMode() {
    long cPtr = OsmAndCoreJNI.MapSymbolsGroup_presentationMode_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_OsmAnd__BitmaskT_OsmAnd__MapSymbolsGroup__PresentationModeFlag_unsigned_int_t(cPtr, false);
  }

  public void setIntersectionProcessingMode(SWIGTYPE_p_OsmAnd__BitmaskT_OsmAnd__MapSymbolsGroup__IntersectionProcessingModeFlag_unsigned_int_t value) {
    OsmAndCoreJNI.MapSymbolsGroup_intersectionProcessingMode_set(swigCPtr, this, SWIGTYPE_p_OsmAnd__BitmaskT_OsmAnd__MapSymbolsGroup__IntersectionProcessingModeFlag_unsigned_int_t.getCPtr(value));
  }

  public SWIGTYPE_p_OsmAnd__BitmaskT_OsmAnd__MapSymbolsGroup__IntersectionProcessingModeFlag_unsigned_int_t getIntersectionProcessingMode() {
    long cPtr = OsmAndCoreJNI.MapSymbolsGroup_intersectionProcessingMode_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_OsmAnd__BitmaskT_OsmAnd__MapSymbolsGroup__IntersectionProcessingModeFlag_unsigned_int_t(cPtr, false);
  }

  public void setSymbols(SWIGTYPE_p_QListT_std__shared_ptrT_OsmAnd__MapSymbol_t_t value) {
    OsmAndCoreJNI.MapSymbolsGroup_symbols_set(swigCPtr, this, SWIGTYPE_p_QListT_std__shared_ptrT_OsmAnd__MapSymbol_t_t.getCPtr(value));
  }

  public SWIGTYPE_p_QListT_std__shared_ptrT_OsmAnd__MapSymbol_t_t getSymbols() {
    long cPtr = OsmAndCoreJNI.MapSymbolsGroup_symbols_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_QListT_std__shared_ptrT_OsmAnd__MapSymbol_t_t(cPtr, false);
  }

  public MapSymbol getFirstSymbolWithContentClass(MapSymbol.ContentClass contentClass) {
    long cPtr = OsmAndCoreJNI.MapSymbolsGroup_getFirstSymbolWithContentClass(swigCPtr, this, contentClass.swigValue());
    return (cPtr == 0) ? null : new MapSymbol(cPtr, true);
  }

  public long numberOfSymbolsWithContentClass(MapSymbol.ContentClass contentClass) {
    return OsmAndCoreJNI.MapSymbolsGroup_numberOfSymbolsWithContentClass(swigCPtr, this, contentClass.swigValue());
  }

  public String getDebugTitle() {
    return OsmAndCoreJNI.MapSymbolsGroup_getDebugTitle(swigCPtr, this);
  }

  public void setAdditionalInstancesDiscardOriginal(boolean value) {
    OsmAndCoreJNI.MapSymbolsGroup_additionalInstancesDiscardOriginal_set(swigCPtr, this, value);
  }

  public boolean getAdditionalInstancesDiscardOriginal() {
    return OsmAndCoreJNI.MapSymbolsGroup_additionalInstancesDiscardOriginal_get(swigCPtr, this);
  }

  public void setAdditionalInstances(SWIGTYPE_p_QListT_std__shared_ptrT_OsmAnd__MapSymbolsGroup__AdditionalInstance_t_t value) {
    OsmAndCoreJNI.MapSymbolsGroup_additionalInstances_set(swigCPtr, this, SWIGTYPE_p_QListT_std__shared_ptrT_OsmAnd__MapSymbolsGroup__AdditionalInstance_t_t.getCPtr(value));
  }

  public SWIGTYPE_p_QListT_std__shared_ptrT_OsmAnd__MapSymbolsGroup__AdditionalInstance_t_t getAdditionalInstances() {
    long cPtr = OsmAndCoreJNI.MapSymbolsGroup_additionalInstances_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_QListT_std__shared_ptrT_OsmAnd__MapSymbolsGroup__AdditionalInstance_t_t(cPtr, false);
  }

  public enum PresentationModeFlag {
    ShowAnything(OsmAndCoreJNI.MapSymbolsGroup_PresentationModeFlag_ShowAnything_get()),
    ShowAllOrNothing,
    ShowAllCaptionsOrNoCaptions,
    ShowNoneIfIconIsNotShown,
    CheckIntersectionsWithinGroup;

    public final int swigValue() {
      return swigValue;
    }

    public static PresentationModeFlag swigToEnum(int swigValue) {
      PresentationModeFlag[] swigValues = PresentationModeFlag.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (PresentationModeFlag swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + PresentationModeFlag.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private PresentationModeFlag() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private PresentationModeFlag(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private PresentationModeFlag(PresentationModeFlag swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum IntersectionProcessingModeFlag {
    CheckIntersectionsWithinGroup(OsmAndCoreJNI.MapSymbolsGroup_IntersectionProcessingModeFlag_CheckIntersectionsWithinGroup_get());

    public final int swigValue() {
      return swigValue;
    }

    public static IntersectionProcessingModeFlag swigToEnum(int swigValue) {
      IntersectionProcessingModeFlag[] swigValues = IntersectionProcessingModeFlag.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (IntersectionProcessingModeFlag swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + IntersectionProcessingModeFlag.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private IntersectionProcessingModeFlag() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private IntersectionProcessingModeFlag(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private IntersectionProcessingModeFlag(IntersectionProcessingModeFlag swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}

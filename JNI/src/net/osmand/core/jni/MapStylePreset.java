/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.osmand.core.jni;

public class MapStylePreset {
  private long swigCPtr;
  private boolean swigCMemOwn;

  protected MapStylePreset(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MapStylePreset obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OsmAndCoreJNI.delete_MapStylePreset(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public MapStylePreset(MapStylePreset.Type type, String name, String styleName) {
    this(OsmAndCoreJNI.new_MapStylePreset(type.swigValue(), name, styleName), true);
  }

  public MapStylePreset.Type getType() {
    return MapStylePreset.Type.swigToEnum(OsmAndCoreJNI.MapStylePreset_type_get(swigCPtr, this));
  }

  public String getName() {
    return OsmAndCoreJNI.MapStylePreset_name_get(swigCPtr, this);
  }

  public String getStyleName() {
    return OsmAndCoreJNI.MapStylePreset_styleName_get(swigCPtr, this);
  }

  public void setAttributes(SWIGTYPE_p_QHashT_QString_QString_t value) {
    OsmAndCoreJNI.MapStylePreset_attributes_set(swigCPtr, this, SWIGTYPE_p_QHashT_QString_QString_t.getCPtr(value));
  }

  public SWIGTYPE_p_QHashT_QString_QString_t getAttributes() {
    long cPtr = OsmAndCoreJNI.MapStylePreset_attributes_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_QHashT_QString_QString_t(cPtr, false);
  }

  public enum Type {
    General,
    Pedestrian,
    Bicycle,
    Car,
    Custom;

    public final int swigValue() {
      return swigValue;
    }

    public static Type swigToEnum(int swigValue) {
      Type[] swigValues = Type.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Type swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Type.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Type() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Type(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Type(Type swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}

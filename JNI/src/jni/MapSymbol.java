/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package jni;

public class MapSymbol {
  private long swigCPtr;
  private boolean swigCMemOwn;

  protected MapSymbol(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MapSymbol obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OsmAndCoreJNI.delete_MapSymbol(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public SWIGTYPE_p_std__weak_ptrT_OsmAnd__MapSymbolsGroup_t getGroup() {
    long cPtr = OsmAndCoreJNI.MapSymbol_group_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__weak_ptrT_OsmAnd__MapSymbolsGroup_t(cPtr, false);
  }

  public MapSymbolsGroup getGroupPtr() {
    long cPtr = OsmAndCoreJNI.MapSymbol_groupPtr_get(swigCPtr, this);
    return (cPtr == 0) ? null : new MapSymbolsGroup(cPtr, true);
  }

  public boolean getIsShareable() {
    return OsmAndCoreJNI.MapSymbol_isShareable_get(swigCPtr, this);
  }

  public void setOrder(int value) {
    OsmAndCoreJNI.MapSymbol_order_set(swigCPtr, this, value);
  }

  public int getOrder() {
    return OsmAndCoreJNI.MapSymbol_order_get(swigCPtr, this);
  }

  public void setContentClass(MapSymbol.ContentClass value) {
    OsmAndCoreJNI.MapSymbol_contentClass_set(swigCPtr, this, value.swigValue());
  }

  public MapSymbol.ContentClass getContentClass() {
    return MapSymbol.ContentClass.swigToEnum(OsmAndCoreJNI.MapSymbol_contentClass_get(swigCPtr, this));
  }

  public void setIntersectsWithClasses(SWIGTYPE_p_QSetT_int_t value) {
    OsmAndCoreJNI.MapSymbol_intersectsWithClasses_set(swigCPtr, this, SWIGTYPE_p_QSetT_int_t.getCPtr(value));
  }

  public SWIGTYPE_p_QSetT_int_t getIntersectsWithClasses() {
    return new SWIGTYPE_p_QSetT_int_t(OsmAndCoreJNI.MapSymbol_intersectsWithClasses_get(swigCPtr, this), true);
  }

  public void setIsHidden(boolean value) {
    OsmAndCoreJNI.MapSymbol_isHidden_set(swigCPtr, this, value);
  }

  public boolean getIsHidden() {
    return OsmAndCoreJNI.MapSymbol_isHidden_get(swigCPtr, this);
  }

  public void setModulationColor(FColorARGB value) {
    OsmAndCoreJNI.MapSymbol_modulationColor_set(swigCPtr, this, FColorARGB.getCPtr(value), value);
  }

  public FColorARGB getModulationColor() {
    long cPtr = OsmAndCoreJNI.MapSymbol_modulationColor_get(swigCPtr, this);
    return (cPtr == 0) ? null : new FColorARGB(cPtr, false);
  }

  public enum ContentClass {
    Unknown(OsmAndCoreJNI.MapSymbol_ContentClass_Unknown_get()),
    Icon,
    Caption;

    public final int swigValue() {
      return swigValue;
    }

    public static ContentClass swigToEnum(int swigValue) {
      ContentClass[] swigValues = ContentClass.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (ContentClass swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + ContentClass.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private ContentClass() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private ContentClass(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private ContentClass(ContentClass swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}

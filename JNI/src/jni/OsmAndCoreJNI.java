/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.3
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package jni;

public class OsmAndCoreJNI {
  public final static native long new_BoolPtr();
  public final static native void delete_BoolPtr(long jarg1);
  public final static native void BoolPtr_assign(long jarg1, BoolPtr jarg1_, boolean jarg2);
  public final static native boolean BoolPtr_value(long jarg1, BoolPtr jarg1_);
  public final static native long BoolPtr_cast(long jarg1, BoolPtr jarg1_);
  public final static native long BoolPtr_frompointer(long jarg1);
  public final static native long new_IntPtr();
  public final static native void delete_IntPtr(long jarg1);
  public final static native void IntPtr_assign(long jarg1, IntPtr jarg1_, int jarg2);
  public final static native int IntPtr_value(long jarg1, IntPtr jarg1_);
  public final static native long IntPtr_cast(long jarg1, IntPtr jarg1_);
  public final static native long IntPtr_frompointer(long jarg1);
  public final static native long new_UIntPtr();
  public final static native void delete_UIntPtr(long jarg1);
  public final static native void UIntPtr_assign(long jarg1, UIntPtr jarg1_, long jarg2);
  public final static native long UIntPtr_value(long jarg1, UIntPtr jarg1_);
  public final static native long UIntPtr_cast(long jarg1, UIntPtr jarg1_);
  public final static native long UIntPtr_frompointer(long jarg1);
  public final static native long new_FloatPtr();
  public final static native void delete_FloatPtr(long jarg1);
  public final static native void FloatPtr_assign(long jarg1, FloatPtr jarg1_, float jarg2);
  public final static native float FloatPtr_value(long jarg1, FloatPtr jarg1_);
  public final static native long FloatPtr_cast(long jarg1, FloatPtr jarg1_);
  public final static native long FloatPtr_frompointer(long jarg1);
  public final static native long new_DoublePtr();
  public final static native void delete_DoublePtr(long jarg1);
  public final static native void DoublePtr_assign(long jarg1, DoublePtr jarg1_, double jarg2);
  public final static native double DoublePtr_value(long jarg1, DoublePtr jarg1_);
  public final static native long DoublePtr_cast(long jarg1, DoublePtr jarg1_);
  public final static native long DoublePtr_frompointer(long jarg1);
  public final static native long new_QStringList();
  public final static native long QStringList_size(long jarg1, QStringList jarg1_);
  public final static native void QStringList_reserve(long jarg1, QStringList jarg1_, long jarg2);
  public final static native boolean QStringList_isEmpty(long jarg1, QStringList jarg1_);
  public final static native void QStringList_clear(long jarg1, QStringList jarg1_);
  public final static native void QStringList_add(long jarg1, QStringList jarg1_, String jarg2);
  public final static native String QStringList_get(long jarg1, QStringList jarg1_, int jarg2);
  public final static native void QStringList_set(long jarg1, QStringList jarg1_, int jarg2, String jarg3);
  public final static native void delete_QStringList(long jarg1);
  public final static native long SwigUtilities_readEntireFile(String jarg1);
  public final static native long SwigUtilities_readPartOfFile(String jarg1, long jarg2, long jarg3);
  public final static native long SwigUtilities_emptyQByteArray();
  public final static native long SwigUtilities_qDecompress(long jarg1);
  public final static native long SwigUtilities_createSkBitmapARGB888With(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native int OSMAND_DEBUG_get();
  public final static native boolean InitializeCore(long jarg1, ICoreResourcesProvider jarg1_);
  public final static native long getCoreResourcesProvider();
  public final static native void ReleaseCore();
  public final static native long new_IObservable();
  public final static native void delete_IObservable(long jarg1);
  public final static native int crossProductSign__SWIG_0(long jarg1, PointF jarg1_, long jarg2, PointF jarg2_, long jarg3, PointF jarg3_);
  public final static native int crossProductSign__SWIG_1(long jarg1, PointD jarg1_, long jarg2, PointD jarg2_, long jarg3, PointD jarg3_);
  public final static native int crossProductSign__SWIG_2(long jarg1, PointI jarg1_, long jarg2, PointI jarg2_, long jarg3, PointI jarg3_);
  public final static native int crossProductSign__SWIG_3(long jarg1, long jarg2, long jarg3);
  public final static native boolean testLineLineIntersection__SWIG_0(long jarg1, PointI jarg1_, long jarg2, PointI jarg2_, long jarg3, PointI jarg3_, long jarg4, PointI jarg4_);
  public final static native boolean testLineLineIntersection__SWIG_1(long jarg1, PointF jarg1_, long jarg2, PointF jarg2_, long jarg3, PointF jarg3_, long jarg4, PointF jarg4_);
  public final static native boolean testLineLineIntersection__SWIG_2(long jarg1, PointD jarg1_, long jarg2, PointD jarg2_, long jarg3, PointD jarg3_, long jarg4, PointD jarg4_);
  public final static native boolean testLineLineIntersection__SWIG_3(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native int Edge_Invalid_get();
  public final static native int Edge_Left_get();
  public final static native int Edge_Top_get();
  public final static native int Edge_Right_get();
  public final static native int Edge_Bottom_get();
  public final static native int Quadrant_NE_get();
  public final static native void TileId_id_set(long jarg1, TileId jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger TileId_id_get(long jarg1, TileId jarg1_);
  public final static native void TileId_x_set(long jarg1, TileId jarg1_, int jarg2);
  public final static native int TileId_x_get(long jarg1, TileId jarg1_);
  public final static native void TileId_y_set(long jarg1, TileId jarg1_, int jarg2);
  public final static native int TileId_y_get(long jarg1, TileId jarg1_);
  public final static native long new_TileId();
  public final static native void delete_TileId(long jarg1);
  public final static native int ZoomLevel0_get();
  public final static native int ZoomLevel31_get();
  public final static native int InvalidZoom_get();
  public final static native int MinZoomLevel_get();
  public final static native int MaxZoomLevel_get();
  public final static native int ZoomLevelsCount_get();
  public final static native long new_FColorARGB__SWIG_0();
  public final static native long new_FColorARGB__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native void FColorARGB_a_set(long jarg1, FColorARGB jarg1_, float jarg2);
  public final static native float FColorARGB_a_get(long jarg1, FColorARGB jarg1_);
  public final static native void FColorARGB_r_set(long jarg1, FColorARGB jarg1_, float jarg2);
  public final static native float FColorARGB_r_get(long jarg1, FColorARGB jarg1_);
  public final static native void FColorARGB_g_set(long jarg1, FColorARGB jarg1_, float jarg2);
  public final static native float FColorARGB_g_get(long jarg1, FColorARGB jarg1_);
  public final static native void FColorARGB_b_set(long jarg1, FColorARGB jarg1_, float jarg2);
  public final static native float FColorARGB_b_get(long jarg1, FColorARGB jarg1_);
  public final static native long FColorARGB_withAlpha(long jarg1, FColorARGB jarg1_, float jarg2);
  public final static native long FColorARGB_setAlpha(long jarg1, FColorARGB jarg1_, float jarg2);
  public final static native void delete_FColorARGB(long jarg1);
  public final static native long new_FColorRGB__SWIG_0();
  public final static native long new_FColorRGB__SWIG_1(float jarg1, float jarg2, float jarg3);
  public final static native long new_FColorRGB__SWIG_2(long jarg1, FColorARGB jarg1_);
  public final static native void FColorRGB_r_set(long jarg1, FColorRGB jarg1_, float jarg2);
  public final static native float FColorRGB_r_get(long jarg1, FColorRGB jarg1_);
  public final static native void FColorRGB_g_set(long jarg1, FColorRGB jarg1_, float jarg2);
  public final static native float FColorRGB_g_get(long jarg1, FColorRGB jarg1_);
  public final static native void FColorRGB_b_set(long jarg1, FColorRGB jarg1_, float jarg2);
  public final static native float FColorRGB_b_get(long jarg1, FColorRGB jarg1_);
  public final static native long FColorRGB_withAlpha(long jarg1, FColorRGB jarg1_, float jarg2);
  public final static native void delete_FColorRGB(long jarg1);
  public final static native long new_ColorARGB__SWIG_0();
  public final static native long new_ColorARGB__SWIG_1(long jarg1);
  public final static native long new_ColorARGB__SWIG_2(short jarg1, short jarg2, short jarg3, short jarg4);
  public final static native long new_ColorARGB__SWIG_3(long jarg1, FColorARGB jarg1_);
  public final static native void ColorARGB_a_set(long jarg1, ColorARGB jarg1_, short jarg2);
  public final static native short ColorARGB_a_get(long jarg1, ColorARGB jarg1_);
  public final static native void ColorARGB_r_set(long jarg1, ColorARGB jarg1_, short jarg2);
  public final static native short ColorARGB_r_get(long jarg1, ColorARGB jarg1_);
  public final static native void ColorARGB_g_set(long jarg1, ColorARGB jarg1_, short jarg2);
  public final static native short ColorARGB_g_get(long jarg1, ColorARGB jarg1_);
  public final static native void ColorARGB_b_set(long jarg1, ColorARGB jarg1_, short jarg2);
  public final static native short ColorARGB_b_get(long jarg1, ColorARGB jarg1_);
  public final static native long ColorARGB_withAlpha(long jarg1, ColorARGB jarg1_, short jarg2);
  public final static native long ColorARGB_setAlpha(long jarg1, ColorARGB jarg1_, short jarg2);
  public final static native void delete_ColorARGB(long jarg1);
  public final static native long new_ColorRGB__SWIG_0();
  public final static native long new_ColorRGB__SWIG_1(short jarg1, short jarg2, short jarg3);
  public final static native long new_ColorRGB__SWIG_2(long jarg1, ColorARGB jarg1_);
  public final static native long new_ColorRGB__SWIG_3(long jarg1, FColorRGB jarg1_);
  public final static native void ColorRGB_r_set(long jarg1, ColorRGB jarg1_, short jarg2);
  public final static native short ColorRGB_r_get(long jarg1, ColorRGB jarg1_);
  public final static native void ColorRGB_g_set(long jarg1, ColorRGB jarg1_, short jarg2);
  public final static native short ColorRGB_g_get(long jarg1, ColorRGB jarg1_);
  public final static native void ColorRGB_b_set(long jarg1, ColorRGB jarg1_, short jarg2);
  public final static native short ColorRGB_b_get(long jarg1, ColorRGB jarg1_);
  public final static native long ColorRGB_withAlpha(long jarg1, ColorRGB jarg1_, short jarg2);
  public final static native void delete_ColorRGB(long jarg1);
  public final static native int LanguageId_Invariant_get();
  public final static native void LatLon_latitude_set(long jarg1, LatLon jarg1_, double jarg2);
  public final static native double LatLon_latitude_get(long jarg1, LatLon jarg1_);
  public final static native void LatLon_longitude_set(long jarg1, LatLon jarg1_, double jarg2);
  public final static native double LatLon_longitude_get(long jarg1, LatLon jarg1_);
  public final static native long new_LatLon__SWIG_0();
  public final static native long new_LatLon__SWIG_1(long jarg1, LatLon jarg1_);
  public final static native long new_LatLon__SWIG_2(double jarg1, double jarg2);
  public final static native void delete_LatLon(long jarg1);
  public final static native void PointI_x_set(long jarg1, PointI jarg1_, int jarg2);
  public final static native int PointI_x_get(long jarg1, PointI jarg1_);
  public final static native void PointI_y_set(long jarg1, PointI jarg1_, int jarg2);
  public final static native int PointI_y_get(long jarg1, PointI jarg1_);
  public final static native long new_PointI__SWIG_0();
  public final static native long new_PointI__SWIG_1(long jarg1, PointI jarg1_);
  public final static native long new_PointI__SWIG_2(int jarg1, int jarg2);
  public final static native void delete_PointI(long jarg1);
  public final static native void PointF_x_set(long jarg1, PointF jarg1_, float jarg2);
  public final static native float PointF_x_get(long jarg1, PointF jarg1_);
  public final static native void PointF_y_set(long jarg1, PointF jarg1_, float jarg2);
  public final static native float PointF_y_get(long jarg1, PointF jarg1_);
  public final static native long new_PointF__SWIG_0();
  public final static native long new_PointF__SWIG_1(long jarg1, PointF jarg1_);
  public final static native long new_PointF__SWIG_2(float jarg1, float jarg2);
  public final static native void delete_PointF(long jarg1);
  public final static native void PointD_x_set(long jarg1, PointD jarg1_, double jarg2);
  public final static native double PointD_x_get(long jarg1, PointD jarg1_);
  public final static native void PointD_y_set(long jarg1, PointD jarg1_, double jarg2);
  public final static native double PointD_y_get(long jarg1, PointD jarg1_);
  public final static native long new_PointD__SWIG_0();
  public final static native long new_PointD__SWIG_1(long jarg1, PointD jarg1_);
  public final static native long new_PointD__SWIG_2(double jarg1, double jarg2);
  public final static native void delete_PointD(long jarg1);
  public final static native long new_AreaI__SWIG_0();
  public final static native long new_AreaI__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native long new_AreaI__SWIG_2(long jarg1, PointI jarg1_, long jarg2, PointI jarg2_);
  public final static native long new_AreaI__SWIG_3(long jarg1, AreaI jarg1_);
  public final static native void AreaI_topLeft_set(long jarg1, AreaI jarg1_, long jarg2, PointI jarg2_);
  public final static native long AreaI_topLeft_get(long jarg1, AreaI jarg1_);
  public final static native void AreaI_bottomRight_set(long jarg1, AreaI jarg1_, long jarg2, PointI jarg2_);
  public final static native long AreaI_bottomRight_get(long jarg1, AreaI jarg1_);
  public final static native boolean AreaI_contains__SWIG_0(long jarg1, AreaI jarg1_, int jarg2, int jarg3);
  public final static native boolean AreaI_contains__SWIG_1(long jarg1, AreaI jarg1_, long jarg2, PointI jarg2_);
  public final static native boolean AreaI_contains__SWIG_2(long jarg1, AreaI jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native boolean AreaI_contains__SWIG_3(long jarg1, AreaI jarg1_, long jarg2, AreaI jarg2_);
  public final static native boolean AreaI_intersects__SWIG_0(long jarg1, AreaI jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native boolean AreaI_intersects__SWIG_1(long jarg1, AreaI jarg1_, long jarg2, AreaI jarg2_);
  public final static native boolean AreaI_contains__SWIG_4(long jarg1, AreaI jarg1_, long jarg2, OOBBI jarg2_);
  public final static native boolean AreaI_intersects__SWIG_2(long jarg1, AreaI jarg1_, long jarg2, OOBBI jarg2_);
  public final static native int AreaI_width(long jarg1, AreaI jarg1_);
  public final static native int AreaI_height(long jarg1, AreaI jarg1_);
  public final static native long AreaI_center(long jarg1, AreaI jarg1_);
  public final static native long AreaI_topRight(long jarg1, AreaI jarg1_);
  public final static native long AreaI_bottomLeft(long jarg1, AreaI jarg1_);
  public final static native long AreaI_getQuadrant(long jarg1, AreaI jarg1_, int jarg2);
  public final static native long AreaI_getEnlargedToInclude(long jarg1, AreaI jarg1_, long jarg2, PointI jarg2_);
  public final static native long AreaI_getEnlargedBy__SWIG_0(long jarg1, AreaI jarg1_, long jarg2, PointI jarg2_);
  public final static native long AreaI_getEnlargedBy__SWIG_1(long jarg1, AreaI jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native long AreaI_largest();
  public final static native long AreaI_fromCenterAndSize(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native void delete_AreaI(long jarg1);
  public final static native long new_AreaF__SWIG_0();
  public final static native long new_AreaF__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native long new_AreaF__SWIG_2(long jarg1, PointF jarg1_, long jarg2, PointF jarg2_);
  public final static native long new_AreaF__SWIG_3(long jarg1, AreaF jarg1_);
  public final static native void AreaF_topLeft_set(long jarg1, AreaF jarg1_, long jarg2, PointF jarg2_);
  public final static native long AreaF_topLeft_get(long jarg1, AreaF jarg1_);
  public final static native void AreaF_bottomRight_set(long jarg1, AreaF jarg1_, long jarg2, PointF jarg2_);
  public final static native long AreaF_bottomRight_get(long jarg1, AreaF jarg1_);
  public final static native boolean AreaF_contains__SWIG_0(long jarg1, AreaF jarg1_, float jarg2, float jarg3);
  public final static native boolean AreaF_contains__SWIG_1(long jarg1, AreaF jarg1_, long jarg2, PointF jarg2_);
  public final static native boolean AreaF_contains__SWIG_2(long jarg1, AreaF jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native boolean AreaF_contains__SWIG_3(long jarg1, AreaF jarg1_, long jarg2, AreaF jarg2_);
  public final static native boolean AreaF_intersects__SWIG_0(long jarg1, AreaF jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native boolean AreaF_intersects__SWIG_1(long jarg1, AreaF jarg1_, long jarg2, AreaF jarg2_);
  public final static native boolean AreaF_contains__SWIG_4(long jarg1, AreaF jarg1_, long jarg2, OOBBF jarg2_);
  public final static native boolean AreaF_intersects__SWIG_2(long jarg1, AreaF jarg1_, long jarg2, OOBBF jarg2_);
  public final static native float AreaF_width(long jarg1, AreaF jarg1_);
  public final static native float AreaF_height(long jarg1, AreaF jarg1_);
  public final static native long AreaF_center(long jarg1, AreaF jarg1_);
  public final static native long AreaF_topRight(long jarg1, AreaF jarg1_);
  public final static native long AreaF_bottomLeft(long jarg1, AreaF jarg1_);
  public final static native long AreaF_getQuadrant(long jarg1, AreaF jarg1_, int jarg2);
  public final static native long AreaF_getEnlargedToInclude(long jarg1, AreaF jarg1_, long jarg2, PointF jarg2_);
  public final static native long AreaF_getEnlargedBy__SWIG_0(long jarg1, AreaF jarg1_, long jarg2, PointF jarg2_);
  public final static native long AreaF_getEnlargedBy__SWIG_1(long jarg1, AreaF jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native long AreaF_largest();
  public final static native long AreaF_fromCenterAndSize(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native void delete_AreaF(long jarg1);
  public final static native long new_AreaD__SWIG_0();
  public final static native long new_AreaD__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4);
  public final static native long new_AreaD__SWIG_2(long jarg1, PointD jarg1_, long jarg2, PointD jarg2_);
  public final static native long new_AreaD__SWIG_3(long jarg1, AreaD jarg1_);
  public final static native void AreaD_topLeft_set(long jarg1, AreaD jarg1_, long jarg2, PointD jarg2_);
  public final static native long AreaD_topLeft_get(long jarg1, AreaD jarg1_);
  public final static native void AreaD_bottomRight_set(long jarg1, AreaD jarg1_, long jarg2, PointD jarg2_);
  public final static native long AreaD_bottomRight_get(long jarg1, AreaD jarg1_);
  public final static native boolean AreaD_contains__SWIG_0(long jarg1, AreaD jarg1_, double jarg2, double jarg3);
  public final static native boolean AreaD_contains__SWIG_1(long jarg1, AreaD jarg1_, long jarg2, PointD jarg2_);
  public final static native boolean AreaD_contains__SWIG_2(long jarg1, AreaD jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native boolean AreaD_contains__SWIG_3(long jarg1, AreaD jarg1_, long jarg2, AreaD jarg2_);
  public final static native boolean AreaD_intersects__SWIG_0(long jarg1, AreaD jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native boolean AreaD_intersects__SWIG_1(long jarg1, AreaD jarg1_, long jarg2, AreaD jarg2_);
  public final static native boolean AreaD_contains__SWIG_4(long jarg1, AreaD jarg1_, long jarg2, OOBBD jarg2_);
  public final static native boolean AreaD_intersects__SWIG_2(long jarg1, AreaD jarg1_, long jarg2, OOBBD jarg2_);
  public final static native double AreaD_width(long jarg1, AreaD jarg1_);
  public final static native double AreaD_height(long jarg1, AreaD jarg1_);
  public final static native long AreaD_center(long jarg1, AreaD jarg1_);
  public final static native long AreaD_topRight(long jarg1, AreaD jarg1_);
  public final static native long AreaD_bottomLeft(long jarg1, AreaD jarg1_);
  public final static native long AreaD_getQuadrant(long jarg1, AreaD jarg1_, int jarg2);
  public final static native long AreaD_getEnlargedToInclude(long jarg1, AreaD jarg1_, long jarg2, PointD jarg2_);
  public final static native long AreaD_getEnlargedBy__SWIG_0(long jarg1, AreaD jarg1_, long jarg2, PointD jarg2_);
  public final static native long AreaD_getEnlargedBy__SWIG_1(long jarg1, AreaD jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native long AreaD_largest();
  public final static native long AreaD_fromCenterAndSize(double jarg1, double jarg2, double jarg3, double jarg4);
  public final static native void delete_AreaD(long jarg1);
  public final static native long new_OOBBI__SWIG_0();
  public final static native long new_OOBBI__SWIG_1(long jarg1, AreaI jarg1_, float jarg2);
  public final static native boolean OOBBI_contains__SWIG_0(long jarg1, OOBBI jarg1_, long jarg2, OOBBI jarg2_);
  public final static native boolean OOBBI_intersects__SWIG_0(long jarg1, OOBBI jarg1_, long jarg2, OOBBI jarg2_);
  public final static native boolean OOBBI_contains__SWIG_1(long jarg1, OOBBI jarg1_, long jarg2, AreaI jarg2_);
  public final static native boolean OOBBI_contains__SWIG_2(long jarg1, OOBBI jarg1_, long jarg2, PointI jarg2_);
  public final static native boolean OOBBI_intersects__SWIG_1(long jarg1, OOBBI jarg1_, long jarg2, AreaI jarg2_);
  public final static native long OOBBI_getEnlargedBy__SWIG_0(long jarg1, OOBBI jarg1_, long jarg2, PointI jarg2_);
  public final static native long OOBBI_getEnlargedBy__SWIG_1(long jarg1, OOBBI jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native void delete_OOBBI(long jarg1);
  public final static native long new_OOBBF__SWIG_0();
  public final static native long new_OOBBF__SWIG_1(long jarg1, AreaF jarg1_, float jarg2);
  public final static native boolean OOBBF_contains__SWIG_0(long jarg1, OOBBF jarg1_, long jarg2, OOBBF jarg2_);
  public final static native boolean OOBBF_intersects__SWIG_0(long jarg1, OOBBF jarg1_, long jarg2, OOBBF jarg2_);
  public final static native boolean OOBBF_contains__SWIG_1(long jarg1, OOBBF jarg1_, long jarg2, AreaF jarg2_);
  public final static native boolean OOBBF_contains__SWIG_2(long jarg1, OOBBF jarg1_, long jarg2, PointF jarg2_);
  public final static native boolean OOBBF_intersects__SWIG_1(long jarg1, OOBBF jarg1_, long jarg2, AreaF jarg2_);
  public final static native long OOBBF_getEnlargedBy__SWIG_0(long jarg1, OOBBF jarg1_, long jarg2, PointF jarg2_);
  public final static native long OOBBF_getEnlargedBy__SWIG_1(long jarg1, OOBBF jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void delete_OOBBF(long jarg1);
  public final static native long new_OOBBD__SWIG_0();
  public final static native long new_OOBBD__SWIG_1(long jarg1, AreaD jarg1_, float jarg2);
  public final static native boolean OOBBD_contains__SWIG_0(long jarg1, OOBBD jarg1_, long jarg2, OOBBD jarg2_);
  public final static native boolean OOBBD_intersects__SWIG_0(long jarg1, OOBBD jarg1_, long jarg2, OOBBD jarg2_);
  public final static native boolean OOBBD_contains__SWIG_1(long jarg1, OOBBD jarg1_, long jarg2, AreaD jarg2_);
  public final static native boolean OOBBD_contains__SWIG_2(long jarg1, OOBBD jarg1_, long jarg2, PointD jarg2_);
  public final static native boolean OOBBD_intersects__SWIG_1(long jarg1, OOBBD jarg1_, long jarg2, AreaD jarg2_);
  public final static native long OOBBD_getEnlargedBy__SWIG_0(long jarg1, OOBBD jarg1_, long jarg2, PointD jarg2_);
  public final static native long OOBBD_getEnlargedBy__SWIG_1(long jarg1, OOBBD jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native void delete_OOBBD(long jarg1);
  public final static native long new_MapRendererStateChanges__SWIG_0();
  public final static native long new_MapRendererStateChanges__SWIG_1(long jarg1);
  public final static native long new_MapRendererStateChanges__SWIG_2(long jarg1);
  public final static native void delete_MapRendererStateChanges(long jarg1);
  public final static native boolean MapRendererStateChanges_isSet(long jarg1, MapRendererStateChanges jarg1_, int jarg2);
  public final static native long MapRendererStateChanges_set(long jarg1, MapRendererStateChanges jarg1_, int jarg2);
  public final static native long MapRendererStateChanges_unset(long jarg1, MapRendererStateChanges jarg1_, int jarg2);
  public final static native long MapRendererStateChanges_unite(long jarg1, MapRendererStateChanges jarg1_, long jarg2);
  public final static native void delete_IObfsCollection(long jarg1);
  public final static native long IObfsCollection_getObfFiles(long jarg1, IObfsCollection jarg1_);
  public final static native long IObfsCollection_obtainDataInterface(long jarg1, IObfsCollection jarg1_);
  public final static native long new_ObfsCollection();
  public final static native void delete_ObfsCollection(long jarg1);
  public final static native int ObfsCollection_addDirectory__SWIG_0(long jarg1, ObfsCollection jarg1_, long jarg2, boolean jarg3);
  public final static native int ObfsCollection_addDirectory__SWIG_1(long jarg1, ObfsCollection jarg1_, long jarg2);
  public final static native int ObfsCollection_addDirectory__SWIG_2(long jarg1, ObfsCollection jarg1_, String jarg2, boolean jarg3);
  public final static native int ObfsCollection_addDirectory__SWIG_3(long jarg1, ObfsCollection jarg1_, String jarg2);
  public final static native int ObfsCollection_addFile__SWIG_0(long jarg1, ObfsCollection jarg1_, long jarg2);
  public final static native int ObfsCollection_addFile__SWIG_1(long jarg1, ObfsCollection jarg1_, String jarg2);
  public final static native boolean ObfsCollection_remove(long jarg1, ObfsCollection jarg1_, int jarg2);
  public final static native long ObfsCollection_getObfFiles(long jarg1, ObfsCollection jarg1_);
  public final static native long ObfsCollection_obtainDataInterface(long jarg1, ObfsCollection jarg1_);
  public final static native long new_ObfDataInterface(long jarg1);
  public final static native void delete_ObfDataInterface(long jarg1);
  public final static native long ObfDataInterface_obfReaders_get(long jarg1, ObfDataInterface jarg1_);
  public final static native boolean ObfDataInterface_loadObfFiles__SWIG_0(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3);
  public final static native boolean ObfDataInterface_loadObfFiles__SWIG_1(long jarg1, ObfDataInterface jarg1_, long jarg2);
  public final static native boolean ObfDataInterface_loadObfFiles__SWIG_2(long jarg1, ObfDataInterface jarg1_);
  public final static native boolean ObfDataInterface_loadBasemapPresenceFlag__SWIG_0(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3);
  public final static native boolean ObfDataInterface_loadBasemapPresenceFlag__SWIG_1(long jarg1, ObfDataInterface jarg1_, long jarg2);
  public final static native boolean ObfDataInterface_loadMapObjects__SWIG_0(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, int jarg4, long jarg5, AreaI jarg5_, long jarg6, long jarg7, long jarg8, long jarg9, long jarg10);
  public final static native boolean ObfDataInterface_loadMapObjects__SWIG_1(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, int jarg4, long jarg5, AreaI jarg5_, long jarg6, long jarg7, long jarg8, long jarg9);
  public final static native boolean ObfDataInterface_loadMapObjects__SWIG_2(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, int jarg4, long jarg5, AreaI jarg5_, long jarg6, long jarg7, long jarg8);
  public final static native boolean ObfDataInterface_loadMapObjects__SWIG_3(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, int jarg4, long jarg5, AreaI jarg5_, long jarg6, long jarg7);
  public final static native boolean ObfDataInterface_loadMapObjects__SWIG_4(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, int jarg4, long jarg5, AreaI jarg5_, long jarg6);
  public final static native boolean ObfDataInterface_loadMapObjects__SWIG_5(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, int jarg4, long jarg5, AreaI jarg5_);
  public final static native boolean ObfDataInterface_loadMapObjects__SWIG_6(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native boolean ObfDataInterface_loadRoads__SWIG_0(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, AreaI jarg3_, long jarg4, long jarg5, long jarg6, long jarg7, long jarg8, long jarg9, long jarg10);
  public final static native boolean ObfDataInterface_loadRoads__SWIG_1(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, AreaI jarg3_, long jarg4, long jarg5, long jarg6, long jarg7, long jarg8, long jarg9);
  public final static native boolean ObfDataInterface_loadRoads__SWIG_2(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, AreaI jarg3_, long jarg4, long jarg5, long jarg6, long jarg7, long jarg8);
  public final static native boolean ObfDataInterface_loadRoads__SWIG_3(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, AreaI jarg3_, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native boolean ObfDataInterface_loadRoads__SWIG_4(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, AreaI jarg3_, long jarg4, long jarg5, long jarg6);
  public final static native boolean ObfDataInterface_loadRoads__SWIG_5(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, AreaI jarg3_, long jarg4, long jarg5);
  public final static native boolean ObfDataInterface_loadRoads__SWIG_6(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, AreaI jarg3_, long jarg4);
  public final static native boolean ObfDataInterface_loadRoads__SWIG_7(long jarg1, ObfDataInterface jarg1_, long jarg2, long jarg3, AreaI jarg3_);
  public final static native boolean ObfDataInterface_loadRoads__SWIG_8(long jarg1, ObfDataInterface jarg1_, long jarg2);
  public final static native int ResourcesManager_ResourceType_Unknown_get();
  public final static native long new_ResourcesManager_Resource_Metadata();
  public final static native void delete_ResourcesManager_Resource_Metadata(long jarg1);
  public final static native void delete_ResourcesManager_Resource(long jarg1);
  public final static native String ResourcesManager_Resource_id_get(long jarg1, ResourcesManager.Resource jarg1_);
  public final static native int ResourcesManager_Resource_type_get(long jarg1, ResourcesManager.Resource jarg1_);
  public final static native int ResourcesManager_Resource_origin_get(long jarg1, ResourcesManager.Resource jarg1_);
  public final static native long ResourcesManager_Resource_metadata_get(long jarg1, ResourcesManager.Resource jarg1_);
  public final static native void delete_ResourcesManager_LocalResource(long jarg1);
  public final static native String ResourcesManager_LocalResource_localPath_get(long jarg1, ResourcesManager.LocalResource jarg1_);
  public final static native java.math.BigInteger ResourcesManager_LocalResource_size_get(long jarg1, ResourcesManager.LocalResource jarg1_);
  public final static native void delete_ResourcesManager_UnmanagedResource(long jarg1);
  public final static native String ResourcesManager_UnmanagedResource_name_get(long jarg1, ResourcesManager.UnmanagedResource jarg1_);
  public final static native void delete_ResourcesManager_InstalledResource(long jarg1);
  public final static native java.math.BigInteger ResourcesManager_InstalledResource_timestamp_get(long jarg1, ResourcesManager.InstalledResource jarg1_);
  public final static native void delete_ResourcesManager_BuiltinResource(long jarg1);
  public final static native void delete_ResourcesManager_ResourceInRepository(long jarg1);
  public final static native long ResourcesManager_ResourceInRepository_url_get(long jarg1, ResourcesManager.ResourceInRepository jarg1_);
  public final static native java.math.BigInteger ResourcesManager_ResourceInRepository_size_get(long jarg1, ResourcesManager.ResourceInRepository jarg1_);
  public final static native java.math.BigInteger ResourcesManager_ResourceInRepository_timestamp_get(long jarg1, ResourcesManager.ResourceInRepository jarg1_);
  public final static native java.math.BigInteger ResourcesManager_ResourceInRepository_packageSize_get(long jarg1, ResourcesManager.ResourceInRepository jarg1_);
  public final static native long new_ResourcesManager_ObfMetadata(long jarg1, ObfFile jarg1_);
  public final static native void delete_ResourcesManager_ObfMetadata(long jarg1);
  public final static native long ResourcesManager_ObfMetadata_obfFile_get(long jarg1, ResourcesManager.ObfMetadata jarg1_);
  public final static native long new_ResourcesManager_MapStyleMetadata(long jarg1);
  public final static native void delete_ResourcesManager_MapStyleMetadata(long jarg1);
  public final static native long ResourcesManager_MapStyleMetadata_mapStyle_get(long jarg1, ResourcesManager.MapStyleMetadata jarg1_);
  public final static native long new_ResourcesManager_MapStylesPresetsMetadata(long jarg1, MapStylesPresetsCollection jarg1_);
  public final static native void delete_ResourcesManager_MapStylesPresetsMetadata(long jarg1);
  public final static native long ResourcesManager_MapStylesPresetsMetadata_presets_get(long jarg1, ResourcesManager.MapStylesPresetsMetadata jarg1_);
  public final static native long new_ResourcesManager_OnlineTileSourcesMetadata(long jarg1, OnlineTileSources jarg1_);
  public final static native void delete_ResourcesManager_OnlineTileSourcesMetadata(long jarg1);
  public final static native long ResourcesManager_OnlineTileSourcesMetadata_sources_get(long jarg1, ResourcesManager.OnlineTileSourcesMetadata jarg1_);
  public final static native long new_ResourcesManager__SWIG_0(String jarg1, String jarg2, long jarg3, QStringList jarg3_, String jarg4, String jarg5, String jarg6);
  public final static native long new_ResourcesManager__SWIG_1(String jarg1, String jarg2, long jarg3, QStringList jarg3_, String jarg4, String jarg5);
  public final static native long new_ResourcesManager__SWIG_2(String jarg1, String jarg2, long jarg3, QStringList jarg3_, String jarg4);
  public final static native long new_ResourcesManager__SWIG_3(String jarg1, String jarg2, long jarg3, QStringList jarg3_);
  public final static native long new_ResourcesManager__SWIG_4(String jarg1, String jarg2);
  public final static native long new_ResourcesManager__SWIG_5(String jarg1);
  public final static native void delete_ResourcesManager(long jarg1);
  public final static native String ResourcesManager_localStoragePath_get(long jarg1, ResourcesManager jarg1_);
  public final static native String ResourcesManager_userStoragePath_get(long jarg1, ResourcesManager jarg1_);
  public final static native long ResourcesManager_readonlyExternalStoragePaths_get(long jarg1, ResourcesManager jarg1_);
  public final static native String ResourcesManager_miniBasemapFilename_get(long jarg1, ResourcesManager jarg1_);
  public final static native String ResourcesManager_localTemporaryPath_get(long jarg1, ResourcesManager jarg1_);
  public final static native String ResourcesManager_repositoryBaseUrl_get(long jarg1, ResourcesManager jarg1_);
  public final static native long ResourcesManager_getResource(long jarg1, ResourcesManager jarg1_, String jarg2);
  public final static native long ResourcesManager_getBuiltInResources(long jarg1, ResourcesManager jarg1_);
  public final static native long ResourcesManager_getBuiltInResource(long jarg1, ResourcesManager jarg1_, String jarg2);
  public final static native boolean ResourcesManager_isBuiltInResource(long jarg1, ResourcesManager jarg1_, String jarg2);
  public final static native boolean ResourcesManager_rescanUnmanagedStoragePaths(long jarg1, ResourcesManager jarg1_);
  public final static native long ResourcesManager_getLocalResources(long jarg1, ResourcesManager jarg1_);
  public final static native long ResourcesManager_getLocalResource(long jarg1, ResourcesManager jarg1_, String jarg2);
  public final static native boolean ResourcesManager_isLocalResource(long jarg1, ResourcesManager jarg1_, String jarg2);
  public final static native boolean ResourcesManager_isRepositoryAvailable(long jarg1, ResourcesManager jarg1_);
  public final static native boolean ResourcesManager_updateRepository(long jarg1, ResourcesManager jarg1_);
  public final static native long ResourcesManager_getResourcesInRepository(long jarg1, ResourcesManager jarg1_);
  public final static native long ResourcesManager_getResourceInRepository(long jarg1, ResourcesManager jarg1_, String jarg2);
  public final static native boolean ResourcesManager_isResourceInRepository(long jarg1, ResourcesManager jarg1_, String jarg2);
  public final static native boolean ResourcesManager_isResourceInstalled(long jarg1, ResourcesManager jarg1_, String jarg2);
  public final static native boolean ResourcesManager_uninstallResource(long jarg1, ResourcesManager jarg1_, String jarg2);
  public final static native boolean ResourcesManager_installFromFile__SWIG_0(long jarg1, ResourcesManager jarg1_, String jarg2, int jarg3);
  public final static native boolean ResourcesManager_installFromFile__SWIG_1(long jarg1, ResourcesManager jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native boolean ResourcesManager_installFromRepository__SWIG_0(long jarg1, ResourcesManager jarg1_, String jarg2, long jarg3);
  public final static native boolean ResourcesManager_installFromRepository__SWIG_1(long jarg1, ResourcesManager jarg1_, String jarg2);
  public final static native boolean ResourcesManager_installFromRepository__SWIG_2(long jarg1, ResourcesManager jarg1_, String jarg2, String jarg3);
  public final static native boolean ResourcesManager_isInstalledResourceOutdated(long jarg1, ResourcesManager jarg1_, String jarg2);
  public final static native long ResourcesManager_getOutdatedInstalledResources(long jarg1, ResourcesManager jarg1_);
  public final static native boolean ResourcesManager_updateFromFile__SWIG_0(long jarg1, ResourcesManager jarg1_, String jarg2);
  public final static native boolean ResourcesManager_updateFromFile__SWIG_1(long jarg1, ResourcesManager jarg1_, String jarg2, String jarg3);
  public final static native boolean ResourcesManager_updateFromRepository__SWIG_0(long jarg1, ResourcesManager jarg1_, String jarg2, long jarg3);
  public final static native boolean ResourcesManager_updateFromRepository__SWIG_1(long jarg1, ResourcesManager jarg1_, String jarg2);
  public final static native boolean ResourcesManager_updateFromRepository__SWIG_2(long jarg1, ResourcesManager jarg1_, String jarg2, String jarg3);
  public final static native long new_ResourcesManager_ILocalResourcesChanged();
  public final static native void delete_ResourcesManager_ILocalResourcesChanged(long jarg1);
  public final static native void ResourcesManager_ILocalResourcesChanged_method(long jarg1, ResourcesManager.ILocalResourcesChanged jarg1_, long jarg2, ResourcesManager jarg2_, long jarg3, QStringList jarg3_, long jarg4, QStringList jarg4_, long jarg5, QStringList jarg5_);
  public final static native boolean ResourcesManager_ILocalResourcesChanged_attachTo(long jarg1, ResourcesManager.ILocalResourcesChanged jarg1_, long jarg2, long jarg3);
  public final static native long ResourcesManager_ILocalResourcesChanged_getBinding(long jarg1, ResourcesManager.ILocalResourcesChanged jarg1_);
  public final static native void ResourcesManager_ILocalResourcesChanged_director_connect(ResourcesManager.ILocalResourcesChanged obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ResourcesManager_ILocalResourcesChanged_change_ownership(ResourcesManager.ILocalResourcesChanged obj, long cptr, boolean take_or_release);
  public final static native long ResourcesManager_localResourcesChangeObservable_get(long jarg1, ResourcesManager jarg1_);
  public final static native long new_ResourcesManager_IRepositoryUpdated();
  public final static native void delete_ResourcesManager_IRepositoryUpdated(long jarg1);
  public final static native void ResourcesManager_IRepositoryUpdated_method(long jarg1, ResourcesManager.IRepositoryUpdated jarg1_, long jarg2, ResourcesManager jarg2_);
  public final static native boolean ResourcesManager_IRepositoryUpdated_attachTo(long jarg1, ResourcesManager.IRepositoryUpdated jarg1_, long jarg2, long jarg3);
  public final static native long ResourcesManager_IRepositoryUpdated_getBinding(long jarg1, ResourcesManager.IRepositoryUpdated jarg1_);
  public final static native void ResourcesManager_IRepositoryUpdated_director_connect(ResourcesManager.IRepositoryUpdated obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ResourcesManager_IRepositoryUpdated_change_ownership(ResourcesManager.IRepositoryUpdated obj, long cptr, boolean take_or_release);
  public final static native long ResourcesManager_repositoryUpdateObservable_get(long jarg1, ResourcesManager jarg1_);
  public final static native long ResourcesManager_onlineTileSources_get(long jarg1, ResourcesManager jarg1_);
  public final static native long ResourcesManager_mapStylesCollection_get(long jarg1, ResourcesManager jarg1_);
  public final static native long ResourcesManager_mapStylesPresetsCollection_get(long jarg1, ResourcesManager jarg1_);
  public final static native long ResourcesManager_obfsCollection_get(long jarg1, ResourcesManager jarg1_);
  public final static native long new_ICoreResourcesProvider();
  public final static native void delete_ICoreResourcesProvider(long jarg1);
  public final static native long ICoreResourcesProvider_getResource__SWIG_0(long jarg1, ICoreResourcesProvider jarg1_, String jarg2, float jarg3, long jarg4);
  public final static native long ICoreResourcesProvider_getResource__SWIG_1(long jarg1, ICoreResourcesProvider jarg1_, String jarg2, float jarg3);
  public final static native long ICoreResourcesProvider_getResource__SWIG_2(long jarg1, ICoreResourcesProvider jarg1_, String jarg2, long jarg3);
  public final static native long ICoreResourcesProvider_getResource__SWIG_3(long jarg1, ICoreResourcesProvider jarg1_, String jarg2);
  public final static native long ICoreResourcesProvider_getResourceAsBitmap__SWIG_0(long jarg1, ICoreResourcesProvider jarg1_, String jarg2, float jarg3);
  public final static native long ICoreResourcesProvider_getResourceAsBitmapSwigExplicitICoreResourcesProvider__SWIG_0(long jarg1, ICoreResourcesProvider jarg1_, String jarg2, float jarg3);
  public final static native long ICoreResourcesProvider_getResourceAsBitmap__SWIG_1(long jarg1, ICoreResourcesProvider jarg1_, String jarg2);
  public final static native long ICoreResourcesProvider_getResourceAsBitmapSwigExplicitICoreResourcesProvider__SWIG_1(long jarg1, ICoreResourcesProvider jarg1_, String jarg2);
  public final static native boolean ICoreResourcesProvider_containsResource__SWIG_0(long jarg1, ICoreResourcesProvider jarg1_, String jarg2, float jarg3);
  public final static native boolean ICoreResourcesProvider_containsResource__SWIG_1(long jarg1, ICoreResourcesProvider jarg1_, String jarg2);
  public final static native void ICoreResourcesProvider_director_connect(ICoreResourcesProvider obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ICoreResourcesProvider_change_ownership(ICoreResourcesProvider obj, long cptr, boolean take_or_release);
  public final static native void delete_CoreResourcesEmbeddedBundle(long jarg1);
  public final static native long CoreResourcesEmbeddedBundle_getResource__SWIG_0(long jarg1, CoreResourcesEmbeddedBundle jarg1_, String jarg2, float jarg3, long jarg4);
  public final static native long CoreResourcesEmbeddedBundle_getResource__SWIG_1(long jarg1, CoreResourcesEmbeddedBundle jarg1_, String jarg2, float jarg3);
  public final static native long CoreResourcesEmbeddedBundle_getResource__SWIG_2(long jarg1, CoreResourcesEmbeddedBundle jarg1_, String jarg2, long jarg3);
  public final static native long CoreResourcesEmbeddedBundle_getResource__SWIG_3(long jarg1, CoreResourcesEmbeddedBundle jarg1_, String jarg2);
  public final static native boolean CoreResourcesEmbeddedBundle_containsResource__SWIG_0(long jarg1, CoreResourcesEmbeddedBundle jarg1_, String jarg2, float jarg3);
  public final static native boolean CoreResourcesEmbeddedBundle_containsResource__SWIG_1(long jarg1, CoreResourcesEmbeddedBundle jarg1_, String jarg2);
  public final static native long CoreResourcesEmbeddedBundle_loadFromCurrentExecutable();
  public final static native long CoreResourcesEmbeddedBundle_loadFromLibrary(String jarg1);
  public final static native int LogSeverityLevel_Error_get();
  public final static native void delete_Logger(long jarg1);
  public final static native long Logger_getCurrentLogSinks(long jarg1, Logger jarg1_);
  public final static native void Logger_addLogSink(long jarg1, Logger jarg1_, long jarg2, ILogSink jarg2_);
  public final static native void Logger_removeLogSink(long jarg1, Logger jarg1_, long jarg2, ILogSink jarg2_);
  public final static native void Logger_removeAllLogSinks(long jarg1, Logger jarg1_);
  public final static native void Logger_flush(long jarg1, Logger jarg1_);
  public final static native long Logger_get();
  public final static native void LogPrintf(int jarg1, String jarg2);
  public final static native void LogFlush();
  public final static native void delete_ILogSink(long jarg1);
  public final static native void ILogSink_flush(long jarg1, ILogSink jarg1_);
  public final static native long new_DefaultLogSink();
  public final static native void delete_DefaultLogSink(long jarg1);
  public final static native void DefaultLogSink_flush(long jarg1, DefaultLogSink jarg1_);
  public final static native long new_QIODeviceLogSink__SWIG_0(long jarg1, boolean jarg2);
  public final static native long new_QIODeviceLogSink__SWIG_1(long jarg1);
  public final static native void delete_QIODeviceLogSink(long jarg1);
  public final static native void QIODeviceLogSink_flush(long jarg1, QIODeviceLogSink jarg1_);
  public final static native long QIODeviceLogSink_createFileLogSink(String jarg1);
  public final static native double Utilities_toRadians(double jarg1);
  public final static native int Utilities_get31TileNumberX(double jarg1);
  public final static native int Utilities_get31TileNumberY(double jarg1);
  public final static native long Utilities_convertLatLonTo31(long jarg1, LatLon jarg1_);
  public final static native double Utilities_get31LongitudeX(double jarg1);
  public final static native double Utilities_get31LatitudeY(double jarg1);
  public final static native long Utilities_convert31ToLatLon(long jarg1, PointI jarg1_);
  public final static native double Utilities_getTileNumberX(float jarg1, double jarg2);
  public final static native double Utilities_getTileNumberY(float jarg1, double jarg2);
  public final static native float Utilities_convert31toFloat__SWIG_0(int jarg1, int jarg2);
  public final static native long Utilities_convert31toFloat__SWIG_1(long jarg1, PointI jarg1_, int jarg2);
  public final static native double Utilities_normalizeLatitude(double jarg1);
  public final static native double Utilities_normalizeLongitude(double jarg1);
  public final static native double Utilities_getPowZoom(float jarg1);
  public final static native double Utilities_getLongitudeFromTile(float jarg1, double jarg2);
  public final static native double Utilities_getLatitudeFromTile(float jarg1, double jarg2);
  public final static native double Utilities_x31toMeters(int jarg1);
  public final static native double Utilities_y31toMeters(int jarg1);
  public final static native long Utilities_metersToX31(double jarg1);
  public final static native long Utilities_metersToY31(double jarg1);
  public final static native double Utilities_squareDistance31__SWIG_0(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native double Utilities_distance31__SWIG_0(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native double Utilities_squareDistance31__SWIG_1(long jarg1, PointI jarg1_, long jarg2, PointI jarg2_);
  public final static native double Utilities_distance31__SWIG_1(long jarg1, PointI jarg1_, long jarg2, PointI jarg2_);
  public final static native double Utilities_distance(double jarg1, double jarg2, double jarg3, double jarg4);
  public final static native double Utilities_projection31(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6);
  public final static native double Utilities_normalizedAngleRadians(double jarg1);
  public final static native double Utilities_normalizedAngleDegrees(double jarg1);
  public final static native double Utilities_polygonArea(long jarg1);
  public final static native boolean Utilities_rayIntersectX__SWIG_0(long jarg1, PointF jarg1_, long jarg2, PointF jarg2_, float jarg3, long jarg4);
  public final static native boolean Utilities_rayIntersect__SWIG_0(long jarg1, PointF jarg1_, long jarg2, PointF jarg2_, long jarg3, PointF jarg3_);
  public final static native boolean Utilities_rayIntersectX__SWIG_1(long jarg1, PointI jarg1_, long jarg2, PointI jarg2_, int jarg3, long jarg4);
  public final static native boolean Utilities_rayIntersect__SWIG_1(long jarg1, PointI jarg1_, long jarg2, PointI jarg2_, long jarg3, PointI jarg3_);
  public final static native double Utilities_degreesDiff(double jarg1, double jarg2);
  public final static native long Utilities_tileBoundingBox31(long jarg1, TileId jarg1_, int jarg2);
  public final static native long Utilities_areaRightShift(long jarg1, AreaI jarg1_, long jarg2);
  public final static native long Utilities_areaLeftShift(long jarg1, AreaI jarg1_, long jarg2);
  public final static native long Utilities_getNextPowerOfTwo(long jarg1);
  public final static native double Utilities_getMetersPerTileUnit(float jarg1, double jarg2, double jarg3);
  public final static native long Utilities_normalizeTileId(long jarg1, TileId jarg1_, int jarg2);
  public final static native long Utilities_normalizeCoordinates(long jarg1, PointI jarg1_, int jarg2);
  public final static native int Utilities_CHCode_Left_get();
  public final static native boolean Utilities_extractFirstNumberPosition(String jarg1, long jarg2, long jarg3, boolean jarg4, boolean jarg5);
  public final static native double Utilities_parseSpeed__SWIG_0(String jarg1, double jarg2, long jarg3);
  public final static native double Utilities_parseSpeed__SWIG_1(String jarg1, double jarg2);
  public final static native double Utilities_parseLength__SWIG_0(String jarg1, double jarg2, long jarg3);
  public final static native double Utilities_parseLength__SWIG_1(String jarg1, double jarg2);
  public final static native double Utilities_parseWeight__SWIG_0(String jarg1, double jarg2, long jarg3);
  public final static native double Utilities_parseWeight__SWIG_1(String jarg1, double jarg2);
  public final static native long Utilities_parseColor__SWIG_0(String jarg1, long jarg2, ColorARGB jarg2_, long jarg3);
  public final static native long Utilities_parseColor__SWIG_1(String jarg1, long jarg2, ColorARGB jarg2_);
  public final static native int Utilities_parseArbitraryInt__SWIG_0(String jarg1, int jarg2, long jarg3);
  public final static native int Utilities_parseArbitraryInt__SWIG_1(String jarg1, int jarg2);
  public final static native int Utilities_parseArbitraryLong__SWIG_0(String jarg1, int jarg2, long jarg3);
  public final static native int Utilities_parseArbitraryLong__SWIG_1(String jarg1, int jarg2);
  public final static native long Utilities_parseArbitraryUInt__SWIG_0(String jarg1, long jarg2, long jarg3);
  public final static native long Utilities_parseArbitraryUInt__SWIG_1(String jarg1, long jarg2);
  public final static native long Utilities_parseArbitraryULong__SWIG_0(String jarg1, long jarg2, long jarg3);
  public final static native long Utilities_parseArbitraryULong__SWIG_1(String jarg1, long jarg2);
  public final static native float Utilities_parseArbitraryFloat__SWIG_0(String jarg1, float jarg2, long jarg3);
  public final static native float Utilities_parseArbitraryFloat__SWIG_1(String jarg1, float jarg2);
  public final static native boolean Utilities_parseArbitraryBool__SWIG_0(String jarg1, boolean jarg2, long jarg3);
  public final static native boolean Utilities_parseArbitraryBool__SWIG_1(String jarg1, boolean jarg2);
  public final static native int Utilities_javaDoubleCompare(double jarg1, double jarg2);
  public final static native void Utilities_findFiles__SWIG_0(long jarg1, long jarg2, long jarg3, boolean jarg4);
  public final static native void Utilities_findFiles__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native void Utilities_findDirectories__SWIG_0(long jarg1, long jarg2, long jarg3, boolean jarg4);
  public final static native void Utilities_findDirectories__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native void Utilities_scanlineFillPolygon(long jarg1, long jarg2, PointF jarg2_, long jarg3);
  public final static native long Utilities_enumerateZoomLevels(int jarg1, int jarg2);
  public final static native String Utilities_stringifyZoomLevels(long jarg1);
  public final static native int ObfAddressBlockType_CitiesOrTowns_get();
  public final static native int ObfAddressBlockType_Villages_get();
  public final static native int ObfAddressBlockType_Postcodes_get();
  public final static native void ObfMapSectionDataBlockId_id_set(long jarg1, ObfMapSectionDataBlockId jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger ObfMapSectionDataBlockId_id_get(long jarg1, ObfMapSectionDataBlockId jarg1_);
  public final static native void ObfMapSectionDataBlockId_sectionRuntimeGeneratedId_set(long jarg1, ObfMapSectionDataBlockId jarg1_, int jarg2);
  public final static native int ObfMapSectionDataBlockId_sectionRuntimeGeneratedId_get(long jarg1, ObfMapSectionDataBlockId jarg1_);
  public final static native void ObfMapSectionDataBlockId_offset_set(long jarg1, ObfMapSectionDataBlockId jarg1_, long jarg2);
  public final static native long ObfMapSectionDataBlockId_offset_get(long jarg1, ObfMapSectionDataBlockId jarg1_);
  public final static native long new_ObfMapSectionDataBlockId();
  public final static native void delete_ObfMapSectionDataBlockId(long jarg1);
  public final static native void ObfRoutingSectionDataBlockId_id_set(long jarg1, ObfRoutingSectionDataBlockId jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger ObfRoutingSectionDataBlockId_id_get(long jarg1, ObfRoutingSectionDataBlockId jarg1_);
  public final static native void ObfRoutingSectionDataBlockId_sectionRuntimeGeneratedId_set(long jarg1, ObfRoutingSectionDataBlockId jarg1_, int jarg2);
  public final static native int ObfRoutingSectionDataBlockId_sectionRuntimeGeneratedId_get(long jarg1, ObfRoutingSectionDataBlockId jarg1_);
  public final static native void ObfRoutingSectionDataBlockId_offset_set(long jarg1, ObfRoutingSectionDataBlockId jarg1_, long jarg2);
  public final static native long ObfRoutingSectionDataBlockId_offset_get(long jarg1, ObfRoutingSectionDataBlockId jarg1_);
  public final static native long new_ObfRoutingSectionDataBlockId();
  public final static native void delete_ObfRoutingSectionDataBlockId(long jarg1);
  public final static native int RoutingDataLevelsCount_get();
  public final static native long new_ObfFile__SWIG_0(String jarg1);
  public final static native long new_ObfFile__SWIG_1(String jarg1, java.math.BigInteger jarg2);
  public final static native void delete_ObfFile(long jarg1);
  public final static native String ObfFile_filePath_get(long jarg1, ObfFile jarg1_);
  public final static native java.math.BigInteger ObfFile_fileSize_get(long jarg1, ObfFile jarg1_);
  public final static native long ObfFile_obfInfo_get(long jarg1, ObfFile jarg1_);
  public final static native void delete_ObfInfo(long jarg1);
  public final static native int ObfInfo_version_get(long jarg1, ObfInfo jarg1_);
  public final static native java.math.BigInteger ObfInfo_creationTimestamp_get(long jarg1, ObfInfo jarg1_);
  public final static native boolean ObfInfo_isBasemap_get(long jarg1, ObfInfo jarg1_);
  public final static native long ObfInfo_mapSections_get(long jarg1, ObfInfo jarg1_);
  public final static native long ObfInfo_addressSections_get(long jarg1, ObfInfo jarg1_);
  public final static native long ObfInfo_routingSections_get(long jarg1, ObfInfo jarg1_);
  public final static native long ObfInfo_poiSections_get(long jarg1, ObfInfo jarg1_);
  public final static native long ObfInfo_transportSections_get(long jarg1, ObfInfo jarg1_);
  public final static native int MapFoundationType_Undefined_get();
  public final static native int MapStyleRulesetType_Invalid_get();
  public final static native int MapStyleRulesetTypesCount_get();
  public final static native int RasterMapLayerId_Invalid_get();
  public final static native int RasterMapLayersCount_get();
  public final static native void TagValueId_id_set(long jarg1, TagValueId jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger TagValueId_id_get(long jarg1, TagValueId jarg1_);
  public final static native void TagValueId_tagId_set(long jarg1, TagValueId jarg1_, int jarg2);
  public final static native int TagValueId_tagId_get(long jarg1, TagValueId jarg1_);
  public final static native void TagValueId_valueId_set(long jarg1, TagValueId jarg1_, int jarg2);
  public final static native int TagValueId_valueId_get(long jarg1, TagValueId jarg1_);
  public final static native long TagValueId_compose(int jarg1, int jarg2);
  public final static native long new_TagValueId();
  public final static native void delete_TagValueId(long jarg1);
  public final static native int MapSymbol_ContentClass_Unknown_get();
  public final static native void delete_MapSymbol(long jarg1);
  public final static native long MapSymbol_group_get(long jarg1, MapSymbol jarg1_);
  public final static native long MapSymbol_groupPtr_get(long jarg1, MapSymbol jarg1_);
  public final static native boolean MapSymbol_isShareable_get(long jarg1, MapSymbol jarg1_);
  public final static native void MapSymbol_order_set(long jarg1, MapSymbol jarg1_, int jarg2);
  public final static native int MapSymbol_order_get(long jarg1, MapSymbol jarg1_);
  public final static native void MapSymbol_contentClass_set(long jarg1, MapSymbol jarg1_, int jarg2);
  public final static native int MapSymbol_contentClass_get(long jarg1, MapSymbol jarg1_);
  public final static native void MapSymbol_intersectsWithClasses_set(long jarg1, MapSymbol jarg1_, long jarg2);
  public final static native long MapSymbol_intersectsWithClasses_get(long jarg1, MapSymbol jarg1_);
  public final static native void MapSymbol_isHidden_set(long jarg1, MapSymbol jarg1_, boolean jarg2);
  public final static native boolean MapSymbol_isHidden_get(long jarg1, MapSymbol jarg1_);
  public final static native void MapSymbol_modulationColor_set(long jarg1, MapSymbol jarg1_, long jarg2, FColorARGB jarg2_);
  public final static native long MapSymbol_modulationColor_get(long jarg1, MapSymbol jarg1_);
  public final static native int MapSymbolsGroup_PresentationModeFlag_ShowAnything_get();
  public final static native int MapSymbolsGroup_IntersectionProcessingModeFlag_CheckIntersectionsWithinGroup_get();
  public final static native long new_MapSymbolsGroup_AdditionalInstance(long jarg1, MapSymbolsGroup jarg1_);
  public final static native void delete_MapSymbolsGroup_AdditionalInstance(long jarg1);
  public final static native long MapSymbolsGroup_AdditionalInstance_originalGroup_get(long jarg1, MapSymbolsGroup.AdditionalInstance jarg1_);
  public final static native void MapSymbolsGroup_AdditionalInstance_symbols_set(long jarg1, MapSymbolsGroup.AdditionalInstance jarg1_, long jarg2);
  public final static native long MapSymbolsGroup_AdditionalInstance_symbols_get(long jarg1, MapSymbolsGroup.AdditionalInstance jarg1_);
  public final static native long MapSymbolsGroup_AdditionalInstance_getFirstSymbolWithContentClass(long jarg1, MapSymbolsGroup.AdditionalInstance jarg1_, int jarg2);
  public final static native long MapSymbolsGroup_AdditionalInstance_numberOfSymbolsWithContentClass(long jarg1, MapSymbolsGroup.AdditionalInstance jarg1_, int jarg2);
  public final static native long new_MapSymbolsGroup_AdditionalSymbolInstanceParameters(long jarg1, MapSymbolsGroup.AdditionalInstance jarg1_);
  public final static native void delete_MapSymbolsGroup_AdditionalSymbolInstanceParameters(long jarg1);
  public final static native long MapSymbolsGroup_AdditionalSymbolInstanceParameters_groupInstancePtr_get(long jarg1, MapSymbolsGroup.AdditionalSymbolInstanceParameters jarg1_);
  public final static native long new_MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters(long jarg1, MapSymbolsGroup.AdditionalInstance jarg1_);
  public final static native void delete_MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters(long jarg1);
  public final static native void MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_overridesPosition31_set(long jarg1, MapSymbolsGroup.AdditionalBillboardSymbolInstanceParameters jarg1_, boolean jarg2);
  public final static native boolean MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_overridesPosition31_get(long jarg1, MapSymbolsGroup.AdditionalBillboardSymbolInstanceParameters jarg1_);
  public final static native void MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_position31_set(long jarg1, MapSymbolsGroup.AdditionalBillboardSymbolInstanceParameters jarg1_, long jarg2, PointI jarg2_);
  public final static native long MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_position31_get(long jarg1, MapSymbolsGroup.AdditionalBillboardSymbolInstanceParameters jarg1_);
  public final static native void MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_overridesOffset_set(long jarg1, MapSymbolsGroup.AdditionalBillboardSymbolInstanceParameters jarg1_, boolean jarg2);
  public final static native boolean MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_overridesOffset_get(long jarg1, MapSymbolsGroup.AdditionalBillboardSymbolInstanceParameters jarg1_);
  public final static native void MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_offset_set(long jarg1, MapSymbolsGroup.AdditionalBillboardSymbolInstanceParameters jarg1_, long jarg2, PointI jarg2_);
  public final static native long MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_offset_get(long jarg1, MapSymbolsGroup.AdditionalBillboardSymbolInstanceParameters jarg1_);
  public final static native long new_MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters(long jarg1, MapSymbolsGroup.AdditionalInstance jarg1_);
  public final static native void delete_MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters(long jarg1);
  public final static native void MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_overridesPosition31_set(long jarg1, MapSymbolsGroup.AdditionalOnSurfaceSymbolInstanceParameters jarg1_, boolean jarg2);
  public final static native boolean MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_overridesPosition31_get(long jarg1, MapSymbolsGroup.AdditionalOnSurfaceSymbolInstanceParameters jarg1_);
  public final static native void MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_position31_set(long jarg1, MapSymbolsGroup.AdditionalOnSurfaceSymbolInstanceParameters jarg1_, long jarg2, PointI jarg2_);
  public final static native long MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_position31_get(long jarg1, MapSymbolsGroup.AdditionalOnSurfaceSymbolInstanceParameters jarg1_);
  public final static native void MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_overridesDirection_set(long jarg1, MapSymbolsGroup.AdditionalOnSurfaceSymbolInstanceParameters jarg1_, boolean jarg2);
  public final static native boolean MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_overridesDirection_get(long jarg1, MapSymbolsGroup.AdditionalOnSurfaceSymbolInstanceParameters jarg1_);
  public final static native void MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_direction_set(long jarg1, MapSymbolsGroup.AdditionalOnSurfaceSymbolInstanceParameters jarg1_, float jarg2);
  public final static native float MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_direction_get(long jarg1, MapSymbolsGroup.AdditionalOnSurfaceSymbolInstanceParameters jarg1_);
  public final static native long new_MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters(long jarg1, MapSymbolsGroup.AdditionalInstance jarg1_);
  public final static native void delete_MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters(long jarg1);
  public final static native void MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters_overridesPinPointOnPath_set(long jarg1, MapSymbolsGroup.AdditionalOnPathSymbolInstanceParameters jarg1_, boolean jarg2);
  public final static native boolean MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters_overridesPinPointOnPath_get(long jarg1, MapSymbolsGroup.AdditionalOnPathSymbolInstanceParameters jarg1_);
  public final static native void MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters_pinPointOnPath_set(long jarg1, MapSymbolsGroup.AdditionalOnPathSymbolInstanceParameters jarg1_, long jarg2);
  public final static native long MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters_pinPointOnPath_get(long jarg1, MapSymbolsGroup.AdditionalOnPathSymbolInstanceParameters jarg1_);
  public final static native long new_MapSymbolsGroup();
  public final static native void delete_MapSymbolsGroup(long jarg1);
  public final static native void MapSymbolsGroup_presentationMode_set(long jarg1, MapSymbolsGroup jarg1_, long jarg2);
  public final static native long MapSymbolsGroup_presentationMode_get(long jarg1, MapSymbolsGroup jarg1_);
  public final static native void MapSymbolsGroup_intersectionProcessingMode_set(long jarg1, MapSymbolsGroup jarg1_, long jarg2);
  public final static native long MapSymbolsGroup_intersectionProcessingMode_get(long jarg1, MapSymbolsGroup jarg1_);
  public final static native void MapSymbolsGroup_symbols_set(long jarg1, MapSymbolsGroup jarg1_, long jarg2);
  public final static native long MapSymbolsGroup_symbols_get(long jarg1, MapSymbolsGroup jarg1_);
  public final static native long MapSymbolsGroup_getFirstSymbolWithContentClass(long jarg1, MapSymbolsGroup jarg1_, int jarg2);
  public final static native long MapSymbolsGroup_numberOfSymbolsWithContentClass(long jarg1, MapSymbolsGroup jarg1_, int jarg2);
  public final static native String MapSymbolsGroup_getDebugTitle(long jarg1, MapSymbolsGroup jarg1_);
  public final static native void MapSymbolsGroup_additionalInstancesDiscardOriginal_set(long jarg1, MapSymbolsGroup jarg1_, boolean jarg2);
  public final static native boolean MapSymbolsGroup_additionalInstancesDiscardOriginal_get(long jarg1, MapSymbolsGroup jarg1_);
  public final static native void MapSymbolsGroup_additionalInstances_set(long jarg1, MapSymbolsGroup jarg1_, long jarg2);
  public final static native long MapSymbolsGroup_additionalInstances_get(long jarg1, MapSymbolsGroup jarg1_);
  public final static native void delete_IMapStylesCollection(long jarg1);
  public final static native long IMapStylesCollection_getCollection(long jarg1, IMapStylesCollection jarg1_);
  public final static native long IMapStylesCollection_getStyleByName(long jarg1, IMapStylesCollection jarg1_, String jarg2);
  public final static native long IMapStylesCollection_getResolvedStyleByName(long jarg1, IMapStylesCollection jarg1_, String jarg2);
  public final static native long new_MapStylesCollection();
  public final static native void delete_MapStylesCollection(long jarg1);
  public final static native boolean MapStylesCollection_addStyleFromFile(long jarg1, MapStylesCollection jarg1_, String jarg2);
  public final static native long MapStylesCollection_getCollection(long jarg1, MapStylesCollection jarg1_);
  public final static native long MapStylesCollection_getStyleByName(long jarg1, MapStylesCollection jarg1_, String jarg2);
  public final static native long MapStylesCollection_getResolvedStyleByName(long jarg1, MapStylesCollection jarg1_, String jarg2);
  public final static native void delete_IMapStylesPresetsCollection(long jarg1);
  public final static native long IMapStylesPresetsCollection_getCollection(long jarg1, IMapStylesPresetsCollection jarg1_);
  public final static native long IMapStylesPresetsCollection_getCollectionFor(long jarg1, IMapStylesPresetsCollection jarg1_, String jarg2);
  public final static native long IMapStylesPresetsCollection_getPreset(long jarg1, IMapStylesPresetsCollection jarg1_, String jarg2, String jarg3);
  public final static native long new_MapStylesPresetsCollection();
  public final static native void delete_MapStylesPresetsCollection(long jarg1);
  public final static native boolean MapStylesPresetsCollection_loadFrom__SWIG_0(long jarg1, MapStylesPresetsCollection jarg1_, long jarg2);
  public final static native boolean MapStylesPresetsCollection_loadFrom__SWIG_1(long jarg1, MapStylesPresetsCollection jarg1_, long jarg2);
  public final static native boolean MapStylesPresetsCollection_loadFrom__SWIG_2(long jarg1, MapStylesPresetsCollection jarg1_, String jarg2);
  public final static native boolean MapStylesPresetsCollection_saveTo__SWIG_0(long jarg1, MapStylesPresetsCollection jarg1_, long jarg2);
  public final static native boolean MapStylesPresetsCollection_saveTo__SWIG_1(long jarg1, MapStylesPresetsCollection jarg1_, String jarg2);
  public final static native boolean MapStylesPresetsCollection_addPreset(long jarg1, MapStylesPresetsCollection jarg1_, long jarg2, MapStylePreset jarg2_);
  public final static native boolean MapStylesPresetsCollection_removePreset(long jarg1, MapStylesPresetsCollection jarg1_, long jarg2, MapStylePreset jarg2_);
  public final static native long MapStylesPresetsCollection_getCollection__SWIG_0(long jarg1, MapStylesPresetsCollection jarg1_);
  public final static native long MapStylesPresetsCollection_getCollectionFor__SWIG_0(long jarg1, MapStylesPresetsCollection jarg1_, String jarg2);
  public final static native long MapStylesPresetsCollection_getPreset__SWIG_0(long jarg1, MapStylesPresetsCollection jarg1_, String jarg2, String jarg3);
  public final static native long new_MapStyleConstantValue();
  public final static native void delete_MapStyleConstantValue(long jarg1);
  public final static native void MapStyleConstantValue_isComplex_set(long jarg1, MapStyleConstantValue jarg1_, boolean jarg2);
  public final static native boolean MapStyleConstantValue_isComplex_get(long jarg1, MapStyleConstantValue jarg1_);
  public final static native boolean MapStyleConstantValue_parse(String jarg1, int jarg2, boolean jarg3, long jarg4, MapStyleConstantValue jarg4_);
  public final static native long MapStyleConstantValue_fromSimpleUInt(long jarg1);
  public final static native String MapStyleConstantValue_toString(long jarg1, MapStyleConstantValue jarg1_, int jarg2);
  public final static native long new_MapStyleValueDefinition(int jarg1, int jarg2, String jarg3, boolean jarg4);
  public final static native void delete_MapStyleValueDefinition(long jarg1);
  public final static native int MapStyleValueDefinition_valueClass_get(long jarg1, MapStyleValueDefinition jarg1_);
  public final static native int MapStyleValueDefinition_dataType_get(long jarg1, MapStyleValueDefinition jarg1_);
  public final static native String MapStyleValueDefinition_name_get(long jarg1, MapStyleValueDefinition jarg1_);
  public final static native boolean MapStyleValueDefinition_isComplex_get(long jarg1, MapStyleValueDefinition jarg1_);
  public final static native void delete_MapStyleBuiltinValueDefinitions_MapStyleBuiltinValueDefinition(long jarg1);
  public final static native int MapStyleBuiltinValueDefinitions_MapStyleBuiltinValueDefinition_id_get(long jarg1, MapStyleBuiltinValueDefinitions.MapStyleBuiltinValueDefinition jarg1_);
  public final static native void delete_MapStyleBuiltinValueDefinitions(long jarg1);
  public final static native long MapStyleBuiltinValueDefinitions_get();
  public final static native int MapStyleBuiltinValueDefinitions_lastBuiltinValueDefinitionId_get(long jarg1, MapStyleBuiltinValueDefinitions jarg1_);
  public final static native int ResolvedMapStyle_EmptyStringId_get();
  public final static native long new_ResolvedMapStyle_ResolvedValue();
  public final static native void delete_ResolvedMapStyle_ResolvedValue(long jarg1);
  public final static native void ResolvedMapStyle_ResolvedValue_isDynamic_set(long jarg1, ResolvedMapStyle.ResolvedValue jarg1_, boolean jarg2);
  public final static native boolean ResolvedMapStyle_ResolvedValue_isDynamic_get(long jarg1, ResolvedMapStyle.ResolvedValue jarg1_);
  public final static native void ResolvedMapStyle_ResolvedValue_asConstantValue_set(long jarg1, ResolvedMapStyle.ResolvedValue jarg1_, long jarg2, MapStyleConstantValue jarg2_);
  public final static native long ResolvedMapStyle_ResolvedValue_asConstantValue_get(long jarg1, ResolvedMapStyle.ResolvedValue jarg1_);
  public final static native long ResolvedMapStyle_ResolvedValue_fromConstantValue(long jarg1, MapStyleConstantValue jarg1_);
  public final static native long ResolvedMapStyle_ResolvedValue_fromAttribute(long jarg1);
  public final static native long new_ResolvedMapStyle_RuleNode(boolean jarg1);
  public final static native void delete_ResolvedMapStyle_RuleNode(long jarg1);
  public final static native boolean ResolvedMapStyle_RuleNode_applyOnlyIfOneOfConditionalsAccepted_get(long jarg1, ResolvedMapStyle.RuleNode jarg1_);
  public final static native void ResolvedMapStyle_RuleNode_values_set(long jarg1, ResolvedMapStyle.RuleNode jarg1_, long jarg2);
  public final static native long ResolvedMapStyle_RuleNode_values_get(long jarg1, ResolvedMapStyle.RuleNode jarg1_);
  public final static native void ResolvedMapStyle_RuleNode_oneOfConditionalSubnodes_set(long jarg1, ResolvedMapStyle.RuleNode jarg1_, long jarg2);
  public final static native long ResolvedMapStyle_RuleNode_oneOfConditionalSubnodes_get(long jarg1, ResolvedMapStyle.RuleNode jarg1_);
  public final static native void ResolvedMapStyle_RuleNode_applySubnodes_set(long jarg1, ResolvedMapStyle.RuleNode jarg1_, long jarg2);
  public final static native long ResolvedMapStyle_RuleNode_applySubnodes_get(long jarg1, ResolvedMapStyle.RuleNode jarg1_);
  public final static native void delete_ResolvedMapStyle_BaseRule(long jarg1);
  public final static native long ResolvedMapStyle_BaseRule_rootNode_get(long jarg1, ResolvedMapStyle.BaseRule jarg1_);
  public final static native long new_ResolvedMapStyle_Rule(int jarg1);
  public final static native void delete_ResolvedMapStyle_Rule(long jarg1);
  public final static native int ResolvedMapStyle_Rule_rulesetType_get(long jarg1, ResolvedMapStyle.Rule jarg1_);
  public final static native long new_ResolvedMapStyle_Attribute(long jarg1);
  public final static native void delete_ResolvedMapStyle_Attribute(long jarg1);
  public final static native long ResolvedMapStyle_Attribute_nameId_get(long jarg1, ResolvedMapStyle.Attribute jarg1_);
  public final static native long new_ResolvedMapStyle_Parameter(String jarg1, String jarg2, long jarg3, int jarg4, long jarg5);
  public final static native void delete_ResolvedMapStyle_Parameter(long jarg1);
  public final static native void ResolvedMapStyle_Parameter_title_set(long jarg1, ResolvedMapStyle.Parameter jarg1_, String jarg2);
  public final static native String ResolvedMapStyle_Parameter_title_get(long jarg1, ResolvedMapStyle.Parameter jarg1_);
  public final static native void ResolvedMapStyle_Parameter_description_set(long jarg1, ResolvedMapStyle.Parameter jarg1_, String jarg2);
  public final static native String ResolvedMapStyle_Parameter_description_get(long jarg1, ResolvedMapStyle.Parameter jarg1_);
  public final static native void ResolvedMapStyle_Parameter_nameId_set(long jarg1, ResolvedMapStyle.Parameter jarg1_, long jarg2);
  public final static native long ResolvedMapStyle_Parameter_nameId_get(long jarg1, ResolvedMapStyle.Parameter jarg1_);
  public final static native void ResolvedMapStyle_Parameter_dataType_set(long jarg1, ResolvedMapStyle.Parameter jarg1_, int jarg2);
  public final static native int ResolvedMapStyle_Parameter_dataType_get(long jarg1, ResolvedMapStyle.Parameter jarg1_);
  public final static native void ResolvedMapStyle_Parameter_possibleValues_set(long jarg1, ResolvedMapStyle.Parameter jarg1_, long jarg2);
  public final static native long ResolvedMapStyle_Parameter_possibleValues_get(long jarg1, ResolvedMapStyle.Parameter jarg1_);
  public final static native long new_ResolvedMapStyle_ParameterValueDefinition(int jarg1, String jarg2, long jarg3);
  public final static native void delete_ResolvedMapStyle_ParameterValueDefinition(long jarg1);
  public final static native int ResolvedMapStyle_ParameterValueDefinition_id_get(long jarg1, ResolvedMapStyle.ParameterValueDefinition jarg1_);
  public final static native long ResolvedMapStyle_ParameterValueDefinition_parameter_get(long jarg1, ResolvedMapStyle.ParameterValueDefinition jarg1_);
  public final static native void delete_ResolvedMapStyle(long jarg1);
  public final static native long ResolvedMapStyle_unresolvedMapStylesChain_get(long jarg1, ResolvedMapStyle jarg1_);
  public final static native int ResolvedMapStyle_getValueDefinitionIdByName(long jarg1, ResolvedMapStyle jarg1_, String jarg2);
  public final static native long ResolvedMapStyle_getValueDefinitionById(long jarg1, ResolvedMapStyle jarg1_, int jarg2);
  public final static native boolean ResolvedMapStyle_parseValue__SWIG_0(long jarg1, ResolvedMapStyle jarg1_, String jarg2, int jarg3, long jarg4, MapStyleConstantValue jarg4_);
  public final static native boolean ResolvedMapStyle_parseValue__SWIG_1(long jarg1, ResolvedMapStyle jarg1_, String jarg2, long jarg3, MapStyleValueDefinition jarg3_, long jarg4, MapStyleConstantValue jarg4_);
  public final static native long ResolvedMapStyle_getAttribute(long jarg1, ResolvedMapStyle jarg1_, String jarg2);
  public final static native long ResolvedMapStyle_getRuleset(long jarg1, ResolvedMapStyle jarg1_, int jarg2);
  public final static native String ResolvedMapStyle_getStringById(long jarg1, ResolvedMapStyle jarg1_, long jarg2);
  public final static native String ResolvedMapStyle_dump__SWIG_0(long jarg1, ResolvedMapStyle jarg1_, String jarg2);
  public final static native String ResolvedMapStyle_dump__SWIG_1(long jarg1, ResolvedMapStyle jarg1_);
  public final static native long ResolvedMapStyle_resolveMapStylesChain(long jarg1);
  public final static native long new_MapStylePreset(int jarg1, String jarg2, String jarg3);
  public final static native void delete_MapStylePreset(long jarg1);
  public final static native int MapStylePreset_type_get(long jarg1, MapStylePreset jarg1_);
  public final static native String MapStylePreset_name_get(long jarg1, MapStylePreset jarg1_);
  public final static native String MapStylePreset_styleName_get(long jarg1, MapStylePreset jarg1_);
  public final static native void MapStylePreset_attributes_set(long jarg1, MapStylePreset jarg1_, long jarg2);
  public final static native long MapStylePreset_attributes_get(long jarg1, MapStylePreset jarg1_);
  public final static native long new_MapPresentationEnvironment__SWIG_0(long jarg1, ResolvedMapStyle jarg1_, float jarg2, String jarg3, int jarg4, long jarg5, ICoreResourcesProvider jarg5_);
  public final static native long new_MapPresentationEnvironment__SWIG_1(long jarg1, ResolvedMapStyle jarg1_, float jarg2, String jarg3, int jarg4);
  public final static native long new_MapPresentationEnvironment__SWIG_2(long jarg1, ResolvedMapStyle jarg1_, float jarg2, String jarg3);
  public final static native long new_MapPresentationEnvironment__SWIG_3(long jarg1, ResolvedMapStyle jarg1_, float jarg2);
  public final static native long new_MapPresentationEnvironment__SWIG_4(long jarg1, ResolvedMapStyle jarg1_);
  public final static native void delete_MapPresentationEnvironment(long jarg1);
  public final static native long MapPresentationEnvironment_styleBuiltinValueDefs_get(long jarg1, MapPresentationEnvironment jarg1_);
  public final static native long MapPresentationEnvironment_resolvedStyle_get(long jarg1, MapPresentationEnvironment jarg1_);
  public final static native float MapPresentationEnvironment_displayDensityFactor_get(long jarg1, MapPresentationEnvironment jarg1_);
  public final static native String MapPresentationEnvironment_localeLanguageId_get(long jarg1, MapPresentationEnvironment jarg1_);
  public final static native int MapPresentationEnvironment_languagePreference_get(long jarg1, MapPresentationEnvironment jarg1_);
  public final static native long MapPresentationEnvironment_externalResourcesProvider_get(long jarg1, MapPresentationEnvironment jarg1_);
  public final static native long MapPresentationEnvironment_dummyMapSection_get(long jarg1, MapPresentationEnvironment jarg1_);
  public final static native long MapPresentationEnvironment_getSettings(long jarg1, MapPresentationEnvironment jarg1_);
  public final static native void MapPresentationEnvironment_setSettings__SWIG_0(long jarg1, MapPresentationEnvironment jarg1_, long jarg2);
  public final static native void MapPresentationEnvironment_setSettings__SWIG_1(long jarg1, MapPresentationEnvironment jarg1_, long jarg2);
  public final static native void MapPresentationEnvironment_applyTo(long jarg1, MapPresentationEnvironment jarg1_, long jarg2);
  public final static native boolean MapPresentationEnvironment_obtainShaderBitmap(long jarg1, MapPresentationEnvironment jarg1_, String jarg2, long jarg3);
  public final static native boolean MapPresentationEnvironment_obtainMapIcon(long jarg1, MapPresentationEnvironment jarg1_, String jarg2, long jarg3);
  public final static native boolean MapPresentationEnvironment_obtainTextShield(long jarg1, MapPresentationEnvironment jarg1_, String jarg2, long jarg3);
  public final static native boolean MapPresentationEnvironment_obtainIconShield(long jarg1, MapPresentationEnvironment jarg1_, String jarg2, long jarg3);
  public final static native long MapPresentationEnvironment_getDefaultBackgroundColor(long jarg1, MapPresentationEnvironment jarg1_, int jarg2);
  public final static native void MapPresentationEnvironment_obtainShadowRenderingOptions(long jarg1, MapPresentationEnvironment jarg1_, int jarg2, long jarg3, long jarg4, ColorARGB jarg4_);
  public final static native double MapPresentationEnvironment_getPolygonAreaMinimalThreshold(long jarg1, MapPresentationEnvironment jarg1_, int jarg2);
  public final static native long MapPresentationEnvironment_getRoadDensityZoomTile(long jarg1, MapPresentationEnvironment jarg1_, int jarg2);
  public final static native long MapPresentationEnvironment_getRoadsDensityLimitPerTile(long jarg1, MapPresentationEnvironment jarg1_, int jarg2);
  public final static native int MapPresentationEnvironment_DefaultShadowLevelMin_get();
  public final static native int MapPresentationEnvironment_DefaultShadowLevelMax_get();
  public final static native int MapRendererStateChange_RasterLayers_Providers_get();
  public final static native long new_MapRendererState();
  public final static native void delete_MapRendererState(long jarg1);
  public final static native void MapRendererState_rasterLayerProviders_set(long jarg1, MapRendererState jarg1_, long jarg2);
  public final static native long MapRendererState_rasterLayerProviders_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_rasterLayerOpacity_set(long jarg1, MapRendererState jarg1_, long jarg2);
  public final static native long MapRendererState_rasterLayerOpacity_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_elevationDataProvider_set(long jarg1, MapRendererState jarg1_, long jarg2, IMapElevationDataProvider jarg2_);
  public final static native long MapRendererState_elevationDataProvider_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_elevationDataScaleFactor_set(long jarg1, MapRendererState jarg1_, float jarg2);
  public final static native float MapRendererState_elevationDataScaleFactor_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_symbolProviders_set(long jarg1, MapRendererState jarg1_, long jarg2);
  public final static native long MapRendererState_symbolProviders_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_windowSize_set(long jarg1, MapRendererState jarg1_, long jarg2, PointI jarg2_);
  public final static native long MapRendererState_windowSize_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_viewport_set(long jarg1, MapRendererState jarg1_, long jarg2, AreaI jarg2_);
  public final static native long MapRendererState_viewport_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_fieldOfView_set(long jarg1, MapRendererState jarg1_, float jarg2);
  public final static native float MapRendererState_fieldOfView_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_skyColor_set(long jarg1, MapRendererState jarg1_, long jarg2, FColorRGB jarg2_);
  public final static native long MapRendererState_skyColor_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_fogColor_set(long jarg1, MapRendererState jarg1_, long jarg2, FColorRGB jarg2_);
  public final static native long MapRendererState_fogColor_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_fogDistance_set(long jarg1, MapRendererState jarg1_, float jarg2);
  public final static native float MapRendererState_fogDistance_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_fogOriginFactor_set(long jarg1, MapRendererState jarg1_, float jarg2);
  public final static native float MapRendererState_fogOriginFactor_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_fogHeightOriginFactor_set(long jarg1, MapRendererState jarg1_, float jarg2);
  public final static native float MapRendererState_fogHeightOriginFactor_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_fogDensity_set(long jarg1, MapRendererState jarg1_, float jarg2);
  public final static native float MapRendererState_fogDensity_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_azimuth_set(long jarg1, MapRendererState jarg1_, float jarg2);
  public final static native float MapRendererState_azimuth_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_elevationAngle_set(long jarg1, MapRendererState jarg1_, float jarg2);
  public final static native float MapRendererState_elevationAngle_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_target31_set(long jarg1, MapRendererState jarg1_, long jarg2, PointI jarg2_);
  public final static native long MapRendererState_target31_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_requestedZoom_set(long jarg1, MapRendererState jarg1_, float jarg2);
  public final static native float MapRendererState_requestedZoom_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_zoomBase_set(long jarg1, MapRendererState jarg1_, int jarg2);
  public final static native int MapRendererState_zoomBase_get(long jarg1, MapRendererState jarg1_);
  public final static native void MapRendererState_zoomFraction_set(long jarg1, MapRendererState jarg1_, float jarg2);
  public final static native float MapRendererState_zoomFraction_get(long jarg1, MapRendererState jarg1_);
  public final static native long new_MapRendererSetupOptions();
  public final static native void delete_MapRendererSetupOptions(long jarg1);
  public final static native long new_MapRendererSetupOptions_IGpuWorkerThreadPrologue();
  public final static native void delete_MapRendererSetupOptions_IGpuWorkerThreadPrologue(long jarg1);
  public final static native void MapRendererSetupOptions_IGpuWorkerThreadPrologue_method(long jarg1, MapRendererSetupOptions.IGpuWorkerThreadPrologue jarg1_, long jarg2, IMapRenderer jarg2_);
  public final static native long MapRendererSetupOptions_IGpuWorkerThreadPrologue_getBinding(long jarg1, MapRendererSetupOptions.IGpuWorkerThreadPrologue jarg1_);
  public final static native void MapRendererSetupOptions_IGpuWorkerThreadPrologue_director_connect(MapRendererSetupOptions.IGpuWorkerThreadPrologue obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MapRendererSetupOptions_IGpuWorkerThreadPrologue_change_ownership(MapRendererSetupOptions.IGpuWorkerThreadPrologue obj, long cptr, boolean take_or_release);
  public final static native long new_MapRendererSetupOptions_IGpuWorkerThreadEpilogue();
  public final static native void delete_MapRendererSetupOptions_IGpuWorkerThreadEpilogue(long jarg1);
  public final static native void MapRendererSetupOptions_IGpuWorkerThreadEpilogue_method(long jarg1, MapRendererSetupOptions.IGpuWorkerThreadEpilogue jarg1_, long jarg2, IMapRenderer jarg2_);
  public final static native long MapRendererSetupOptions_IGpuWorkerThreadEpilogue_getBinding(long jarg1, MapRendererSetupOptions.IGpuWorkerThreadEpilogue jarg1_);
  public final static native void MapRendererSetupOptions_IGpuWorkerThreadEpilogue_director_connect(MapRendererSetupOptions.IGpuWorkerThreadEpilogue obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MapRendererSetupOptions_IGpuWorkerThreadEpilogue_change_ownership(MapRendererSetupOptions.IGpuWorkerThreadEpilogue obj, long cptr, boolean take_or_release);
  public final static native void MapRendererSetupOptions_gpuWorkerThreadEnabled_set(long jarg1, MapRendererSetupOptions jarg1_, boolean jarg2);
  public final static native boolean MapRendererSetupOptions_gpuWorkerThreadEnabled_get(long jarg1, MapRendererSetupOptions jarg1_);
  public final static native void MapRendererSetupOptions_gpuWorkerThreadPrologue_set(long jarg1, MapRendererSetupOptions jarg1_, long jarg2);
  public final static native long MapRendererSetupOptions_gpuWorkerThreadPrologue_get(long jarg1, MapRendererSetupOptions jarg1_);
  public final static native void MapRendererSetupOptions_gpuWorkerThreadEpilogue_set(long jarg1, MapRendererSetupOptions jarg1_, long jarg2);
  public final static native long MapRendererSetupOptions_gpuWorkerThreadEpilogue_get(long jarg1, MapRendererSetupOptions jarg1_);
  public final static native long new_MapRendererSetupOptions_IFrameUpdateRequestCallback();
  public final static native void delete_MapRendererSetupOptions_IFrameUpdateRequestCallback(long jarg1);
  public final static native void MapRendererSetupOptions_IFrameUpdateRequestCallback_method(long jarg1, MapRendererSetupOptions.IFrameUpdateRequestCallback jarg1_, long jarg2, IMapRenderer jarg2_);
  public final static native long MapRendererSetupOptions_IFrameUpdateRequestCallback_getBinding(long jarg1, MapRendererSetupOptions.IFrameUpdateRequestCallback jarg1_);
  public final static native void MapRendererSetupOptions_IFrameUpdateRequestCallback_director_connect(MapRendererSetupOptions.IFrameUpdateRequestCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MapRendererSetupOptions_IFrameUpdateRequestCallback_change_ownership(MapRendererSetupOptions.IFrameUpdateRequestCallback obj, long cptr, boolean take_or_release);
  public final static native void MapRendererSetupOptions_frameUpdateRequestCallback_set(long jarg1, MapRendererSetupOptions jarg1_, long jarg2);
  public final static native long MapRendererSetupOptions_frameUpdateRequestCallback_get(long jarg1, MapRendererSetupOptions jarg1_);
  public final static native long new_MapRendererConfiguration();
  public final static native void delete_MapRendererConfiguration(long jarg1);
  public final static native void MapRendererConfiguration_texturesFilteringQuality_set(long jarg1, MapRendererConfiguration jarg1_, int jarg2);
  public final static native int MapRendererConfiguration_texturesFilteringQuality_get(long jarg1, MapRendererConfiguration jarg1_);
  public final static native void MapRendererConfiguration_limitTextureColorDepthBy16bits_set(long jarg1, MapRendererConfiguration jarg1_, boolean jarg2);
  public final static native boolean MapRendererConfiguration_limitTextureColorDepthBy16bits_get(long jarg1, MapRendererConfiguration jarg1_);
  public final static native void MapRendererConfiguration_heixelsPerTileSide_set(long jarg1, MapRendererConfiguration jarg1_, long jarg2);
  public final static native long MapRendererConfiguration_heixelsPerTileSide_get(long jarg1, MapRendererConfiguration jarg1_);
  public final static native void MapRendererConfiguration_paletteTexturesAllowed_set(long jarg1, MapRendererConfiguration jarg1_, boolean jarg2);
  public final static native boolean MapRendererConfiguration_paletteTexturesAllowed_get(long jarg1, MapRendererConfiguration jarg1_);
  public final static native void MapRendererConfiguration_copyTo(long jarg1, MapRendererConfiguration jarg1_, long jarg2, MapRendererConfiguration jarg2_);
  public final static native long MapRendererConfiguration_createCopy(long jarg1, MapRendererConfiguration jarg1_);
  public final static native long new_MapRendererDebugSettings();
  public final static native void delete_MapRendererDebugSettings(long jarg1);
  public final static native void MapRendererDebugSettings_debugStageEnabled_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_debugStageEnabled_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_excludeOnPathSymbolsFromProcessing_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_excludeOnPathSymbolsFromProcessing_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_excludeBillboardSymbolsFromProcessing_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_excludeBillboardSymbolsFromProcessing_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_excludeOnSurfaceSymbolsFromProcessing_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_excludeOnSurfaceSymbolsFromProcessing_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_skipSymbolsIntersectionCheck_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_skipSymbolsIntersectionCheck_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_showSymbolsBBoxesAcceptedByIntersectionCheck_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_showSymbolsBBoxesAcceptedByIntersectionCheck_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_showSymbolsBBoxesRejectedByIntersectionCheck_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_showSymbolsBBoxesRejectedByIntersectionCheck_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_skipSymbolsMinDistanceToSameContentFromOtherSymbolCheck_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_skipSymbolsMinDistanceToSameContentFromOtherSymbolCheck_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_showSymbolsBBoxesRejectedByMinDistanceToSameContentFromOtherSymbolCheck_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_showSymbolsBBoxesRejectedByMinDistanceToSameContentFromOtherSymbolCheck_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_showSymbolsCheckBBoxesRejectedByMinDistanceToSameContentFromOtherSymbolCheck_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_showSymbolsCheckBBoxesRejectedByMinDistanceToSameContentFromOtherSymbolCheck_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_showSymbolsBBoxesRejectedByPresentationMode_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_showSymbolsBBoxesRejectedByPresentationMode_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_showOnPathSymbolsRenderablesPaths_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_showOnPathSymbolsRenderablesPaths_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_showOnPath2dSymbolGlyphDetails_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_showOnPath2dSymbolGlyphDetails_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_showOnPath3dSymbolGlyphDetails_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_showOnPath3dSymbolGlyphDetails_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_allSymbolsTransparentForIntersectionLookup_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_allSymbolsTransparentForIntersectionLookup_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_showTooShortOnPathSymbolsRenderablesPaths_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_showTooShortOnPathSymbolsRenderablesPaths_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_showAllPaths_set(long jarg1, MapRendererDebugSettings jarg1_, boolean jarg2);
  public final static native boolean MapRendererDebugSettings_showAllPaths_get(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void MapRendererDebugSettings_copyTo(long jarg1, MapRendererDebugSettings jarg1_, long jarg2, MapRendererDebugSettings jarg2_);
  public final static native long MapRendererDebugSettings_createCopy(long jarg1, MapRendererDebugSettings jarg1_);
  public final static native void delete_IMapRenderer(long jarg1);
  public final static native long IMapRenderer_getSetupOptions(long jarg1, IMapRenderer jarg1_);
  public final static native boolean IMapRenderer_setup(long jarg1, IMapRenderer jarg1_, long jarg2, MapRendererSetupOptions jarg2_);
  public final static native long IMapRenderer_getConfiguration(long jarg1, IMapRenderer jarg1_);
  public final static native void IMapRenderer_setConfiguration__SWIG_0(long jarg1, IMapRenderer jarg1_, long jarg2, MapRendererConfiguration jarg2_, boolean jarg3);
  public final static native void IMapRenderer_setConfiguration__SWIG_1(long jarg1, IMapRenderer jarg1_, long jarg2, MapRendererConfiguration jarg2_);
  public final static native boolean IMapRenderer_isRenderingInitialized(long jarg1, IMapRenderer jarg1_);
  public final static native boolean IMapRenderer_initializeRendering(long jarg1, IMapRenderer jarg1_);
  public final static native boolean IMapRenderer_update(long jarg1, IMapRenderer jarg1_);
  public final static native boolean IMapRenderer_prepareFrame(long jarg1, IMapRenderer jarg1_);
  public final static native boolean IMapRenderer_renderFrame(long jarg1, IMapRenderer jarg1_);
  public final static native boolean IMapRenderer_releaseRendering(long jarg1, IMapRenderer jarg1_);
  public final static native boolean IMapRenderer_isIdle(long jarg1, IMapRenderer jarg1_);
  public final static native String IMapRenderer_getNotIdleReason(long jarg1, IMapRenderer jarg1_);
  public final static native boolean IMapRenderer_pauseGpuWorkerThread(long jarg1, IMapRenderer jarg1_);
  public final static native boolean IMapRenderer_resumeGpuWorkerThread(long jarg1, IMapRenderer jarg1_);
  public final static native long new_IMapRenderer_IFramePreparedObserver();
  public final static native void delete_IMapRenderer_IFramePreparedObserver(long jarg1);
  public final static native void IMapRenderer_IFramePreparedObserver_method(long jarg1, IMapRenderer.IFramePreparedObserver jarg1_, long jarg2, IMapRenderer jarg2_);
  public final static native boolean IMapRenderer_IFramePreparedObserver_attachTo(long jarg1, IMapRenderer.IFramePreparedObserver jarg1_, long jarg2, long jarg3);
  public final static native long IMapRenderer_IFramePreparedObserver_getBinding(long jarg1, IMapRenderer.IFramePreparedObserver jarg1_);
  public final static native void IMapRenderer_IFramePreparedObserver_director_connect(IMapRenderer.IFramePreparedObserver obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IMapRenderer_IFramePreparedObserver_change_ownership(IMapRenderer.IFramePreparedObserver obj, long cptr, boolean take_or_release);
  public final static native long IMapRenderer_framePreparedObservable_get(long jarg1, IMapRenderer jarg1_);
  public final static native void IMapRenderer_reloadEverything(long jarg1, IMapRenderer jarg1_);
  public final static native long IMapRenderer_getState(long jarg1, IMapRenderer jarg1_);
  public final static native boolean IMapRenderer_isFrameInvalidated(long jarg1, IMapRenderer jarg1_);
  public final static native void IMapRenderer_forcedFrameInvalidate(long jarg1, IMapRenderer jarg1_);
  public final static native void IMapRenderer_forcedGpuProcessingCycle(long jarg1, IMapRenderer jarg1_);
  public final static native long IMapRenderer_getSymbolsCount(long jarg1, IMapRenderer jarg1_);
  public final static native long IMapRenderer_getSymbolsAt(long jarg1, IMapRenderer jarg1_, long jarg2, PointI jarg2_);
  public final static native void IMapRenderer_setRasterLayerProvider__SWIG_0(long jarg1, IMapRenderer jarg1_, int jarg2, long jarg3, IMapRasterBitmapTileProvider jarg3_, boolean jarg4);
  public final static native void IMapRenderer_setRasterLayerProvider__SWIG_1(long jarg1, IMapRenderer jarg1_, int jarg2, long jarg3, IMapRasterBitmapTileProvider jarg3_);
  public final static native void IMapRenderer_resetRasterLayerProvider__SWIG_0(long jarg1, IMapRenderer jarg1_, int jarg2, boolean jarg3);
  public final static native void IMapRenderer_resetRasterLayerProvider__SWIG_1(long jarg1, IMapRenderer jarg1_, int jarg2);
  public final static native void IMapRenderer_setRasterLayerOpacity__SWIG_0(long jarg1, IMapRenderer jarg1_, int jarg2, float jarg3, boolean jarg4);
  public final static native void IMapRenderer_setRasterLayerOpacity__SWIG_1(long jarg1, IMapRenderer jarg1_, int jarg2, float jarg3);
  public final static native void IMapRenderer_setElevationDataProvider__SWIG_0(long jarg1, IMapRenderer jarg1_, long jarg2, IMapElevationDataProvider jarg2_, boolean jarg3);
  public final static native void IMapRenderer_setElevationDataProvider__SWIG_1(long jarg1, IMapRenderer jarg1_, long jarg2, IMapElevationDataProvider jarg2_);
  public final static native void IMapRenderer_resetElevationDataProvider__SWIG_0(long jarg1, IMapRenderer jarg1_, boolean jarg2);
  public final static native void IMapRenderer_resetElevationDataProvider__SWIG_1(long jarg1, IMapRenderer jarg1_);
  public final static native void IMapRenderer_setElevationDataScaleFactor__SWIG_0(long jarg1, IMapRenderer jarg1_, float jarg2, boolean jarg3);
  public final static native void IMapRenderer_setElevationDataScaleFactor__SWIG_1(long jarg1, IMapRenderer jarg1_, float jarg2);
  public final static native void IMapRenderer_addSymbolProvider__SWIG_0(long jarg1, IMapRenderer jarg1_, long jarg2, IMapDataProvider jarg2_, boolean jarg3);
  public final static native void IMapRenderer_addSymbolProvider__SWIG_1(long jarg1, IMapRenderer jarg1_, long jarg2, IMapDataProvider jarg2_);
  public final static native void IMapRenderer_removeSymbolProvider__SWIG_0(long jarg1, IMapRenderer jarg1_, long jarg2, IMapDataProvider jarg2_, boolean jarg3);
  public final static native void IMapRenderer_removeSymbolProvider__SWIG_1(long jarg1, IMapRenderer jarg1_, long jarg2, IMapDataProvider jarg2_);
  public final static native void IMapRenderer_removeAllSymbolProviders__SWIG_0(long jarg1, IMapRenderer jarg1_, boolean jarg2);
  public final static native void IMapRenderer_removeAllSymbolProviders__SWIG_1(long jarg1, IMapRenderer jarg1_);
  public final static native void IMapRenderer_setWindowSize__SWIG_0(long jarg1, IMapRenderer jarg1_, long jarg2, PointI jarg2_, boolean jarg3);
  public final static native void IMapRenderer_setWindowSize__SWIG_1(long jarg1, IMapRenderer jarg1_, long jarg2, PointI jarg2_);
  public final static native void IMapRenderer_setViewport__SWIG_0(long jarg1, IMapRenderer jarg1_, long jarg2, AreaI jarg2_, boolean jarg3);
  public final static native void IMapRenderer_setViewport__SWIG_1(long jarg1, IMapRenderer jarg1_, long jarg2, AreaI jarg2_);
  public final static native void IMapRenderer_setFieldOfView__SWIG_0(long jarg1, IMapRenderer jarg1_, float jarg2, boolean jarg3);
  public final static native void IMapRenderer_setFieldOfView__SWIG_1(long jarg1, IMapRenderer jarg1_, float jarg2);
  public final static native void IMapRenderer_setDistanceToFog__SWIG_0(long jarg1, IMapRenderer jarg1_, float jarg2, boolean jarg3);
  public final static native void IMapRenderer_setDistanceToFog__SWIG_1(long jarg1, IMapRenderer jarg1_, float jarg2);
  public final static native void IMapRenderer_setFogOriginFactor__SWIG_0(long jarg1, IMapRenderer jarg1_, float jarg2, boolean jarg3);
  public final static native void IMapRenderer_setFogOriginFactor__SWIG_1(long jarg1, IMapRenderer jarg1_, float jarg2);
  public final static native void IMapRenderer_setFogHeightOriginFactor__SWIG_0(long jarg1, IMapRenderer jarg1_, float jarg2, boolean jarg3);
  public final static native void IMapRenderer_setFogHeightOriginFactor__SWIG_1(long jarg1, IMapRenderer jarg1_, float jarg2);
  public final static native void IMapRenderer_setFogDensity__SWIG_0(long jarg1, IMapRenderer jarg1_, float jarg2, boolean jarg3);
  public final static native void IMapRenderer_setFogDensity__SWIG_1(long jarg1, IMapRenderer jarg1_, float jarg2);
  public final static native void IMapRenderer_setFogColor__SWIG_0(long jarg1, IMapRenderer jarg1_, long jarg2, FColorRGB jarg2_, boolean jarg3);
  public final static native void IMapRenderer_setFogColor__SWIG_1(long jarg1, IMapRenderer jarg1_, long jarg2, FColorRGB jarg2_);
  public final static native void IMapRenderer_setSkyColor__SWIG_0(long jarg1, IMapRenderer jarg1_, long jarg2, FColorRGB jarg2_, boolean jarg3);
  public final static native void IMapRenderer_setSkyColor__SWIG_1(long jarg1, IMapRenderer jarg1_, long jarg2, FColorRGB jarg2_);
  public final static native void IMapRenderer_setAzimuth__SWIG_0(long jarg1, IMapRenderer jarg1_, float jarg2, boolean jarg3);
  public final static native void IMapRenderer_setAzimuth__SWIG_1(long jarg1, IMapRenderer jarg1_, float jarg2);
  public final static native void IMapRenderer_setElevationAngle__SWIG_0(long jarg1, IMapRenderer jarg1_, float jarg2, boolean jarg3);
  public final static native void IMapRenderer_setElevationAngle__SWIG_1(long jarg1, IMapRenderer jarg1_, float jarg2);
  public final static native void IMapRenderer_setTarget__SWIG_0(long jarg1, IMapRenderer jarg1_, long jarg2, PointI jarg2_, boolean jarg3);
  public final static native void IMapRenderer_setTarget__SWIG_1(long jarg1, IMapRenderer jarg1_, long jarg2, PointI jarg2_);
  public final static native void IMapRenderer_setZoom__SWIG_0(long jarg1, IMapRenderer jarg1_, float jarg2, boolean jarg3);
  public final static native void IMapRenderer_setZoom__SWIG_1(long jarg1, IMapRenderer jarg1_, float jarg2);
  public final static native long IMapRenderer_getDebugSettings(long jarg1, IMapRenderer jarg1_);
  public final static native void IMapRenderer_setDebugSettings(long jarg1, IMapRenderer jarg1_, long jarg2, MapRendererDebugSettings jarg2_);
  public final static native float IMapRenderer_getMinZoom(long jarg1, IMapRenderer jarg1_);
  public final static native float IMapRenderer_getMaxZoom(long jarg1, IMapRenderer jarg1_);
  public final static native float IMapRenderer_getRecommendedMinZoom__SWIG_0(long jarg1, IMapRenderer jarg1_, int jarg2);
  public final static native float IMapRenderer_getRecommendedMinZoom__SWIG_1(long jarg1, IMapRenderer jarg1_);
  public final static native float IMapRenderer_getRecommendedMaxZoom__SWIG_0(long jarg1, IMapRenderer jarg1_, int jarg2);
  public final static native float IMapRenderer_getRecommendedMaxZoom__SWIG_1(long jarg1, IMapRenderer jarg1_);
  public final static native long new_IMapRenderer_IStateChangeObserver();
  public final static native void delete_IMapRenderer_IStateChangeObserver(long jarg1);
  public final static native void IMapRenderer_IStateChangeObserver_method(long jarg1, IMapRenderer.IStateChangeObserver jarg1_, long jarg2, IMapRenderer jarg2_, int jarg3, long jarg4, MapRendererStateChanges jarg4_);
  public final static native boolean IMapRenderer_IStateChangeObserver_attachTo(long jarg1, IMapRenderer.IStateChangeObserver jarg1_, long jarg2, long jarg3);
  public final static native long IMapRenderer_IStateChangeObserver_getBinding(long jarg1, IMapRenderer.IStateChangeObserver jarg1_);
  public final static native void IMapRenderer_IStateChangeObserver_director_connect(IMapRenderer.IStateChangeObserver obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IMapRenderer_IStateChangeObserver_change_ownership(IMapRenderer.IStateChangeObserver obj, long cptr, boolean take_or_release);
  public final static native long IMapRenderer_stateChangeObservable_get(long jarg1, IMapRenderer jarg1_);
  public final static native boolean IMapRenderer_getLocationFromScreenPoint__SWIG_0(long jarg1, IMapRenderer jarg1_, long jarg2, PointI jarg2_, long jarg3, PointI jarg3_);
  public final static native boolean IMapRenderer_getLocationFromScreenPoint__SWIG_1(long jarg1, IMapRenderer jarg1_, long jarg2, PointI jarg2_, long jarg3);
  public final static native void IMapRenderer_dumpResourcesInfo(long jarg1, IMapRenderer jarg1_);
  public final static native long createMapRenderer(int jarg1);
  public final static native long new_AtlasMapRendererConfiguration();
  public final static native void delete_AtlasMapRendererConfiguration(long jarg1);
  public final static native void AtlasMapRendererConfiguration_referenceTileSizeOnScreenInPixels_set(long jarg1, AtlasMapRendererConfiguration jarg1_, long jarg2);
  public final static native long AtlasMapRendererConfiguration_referenceTileSizeOnScreenInPixels_get(long jarg1, AtlasMapRendererConfiguration jarg1_);
  public final static native void AtlasMapRendererConfiguration_copyTo(long jarg1, AtlasMapRendererConfiguration jarg1_, long jarg2, MapRendererConfiguration jarg2_);
  public final static native long AtlasMapRendererConfiguration_createCopy(long jarg1, AtlasMapRendererConfiguration jarg1_);
  public final static native long AtlasMapRendererConfiguration_Casts_upcastFrom(long jarg1, MapRendererConfiguration jarg1_);
  public final static native long AtlasMapRendererConfiguration_Casts_downcastTo_MapRendererConfiguration(long jarg1, AtlasMapRendererConfiguration jarg1_);
  public final static native long new_AtlasMapRendererConfiguration_Casts();
  public final static native void delete_AtlasMapRendererConfiguration_Casts(long jarg1);
  public final static native int IMapDataProvider_DataType_Unknown_get();
  public final static native void delete_IMapDataProvider(long jarg1);
  public final static native int IMapDataProvider_dataType_get(long jarg1, IMapDataProvider jarg1_);
  public final static native void delete_MapData(long jarg1);
  public final static native int MapData_dataType_get(long jarg1, MapData jarg1_);
  public final static native boolean MapData_consumableContentReleased_get(long jarg1, MapData jarg1_);
  public final static native void MapData_releaseConsumableContent(long jarg1, MapData jarg1_);
  public final static native void delete_IMapTiledDataProvider(long jarg1);
  public final static native int IMapTiledDataProvider_getMinZoom(long jarg1, IMapTiledDataProvider jarg1_);
  public final static native int IMapTiledDataProvider_getMaxZoom(long jarg1, IMapTiledDataProvider jarg1_);
  public final static native boolean IMapTiledDataProvider_obtainData__SWIG_0(long jarg1, IMapTiledDataProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_, long jarg5);
  public final static native boolean IMapTiledDataProvider_obtainData__SWIG_1(long jarg1, IMapTiledDataProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_);
  public final static native void delete_MapTiledData(long jarg1);
  public final static native long MapTiledData_tileId_get(long jarg1, MapTiledData jarg1_);
  public final static native int MapTiledData_zoom_get(long jarg1, MapTiledData jarg1_);
  public final static native void delete_IMapElevationDataProvider(long jarg1);
  public final static native long IMapElevationDataProvider_getTileSize(long jarg1, IMapElevationDataProvider jarg1_);
  public final static native long new_ElevationDataTile(long jarg1, long jarg2, long jarg3, long jarg4, TileId jarg4_, int jarg5);
  public final static native void delete_ElevationDataTile(long jarg1);
  public final static native void ElevationDataTile_data_set(long jarg1, ElevationDataTile jarg1_, long jarg2);
  public final static native long ElevationDataTile_data_get(long jarg1, ElevationDataTile jarg1_);
  public final static native void ElevationDataTile_rowLength_set(long jarg1, ElevationDataTile jarg1_, long jarg2);
  public final static native long ElevationDataTile_rowLength_get(long jarg1, ElevationDataTile jarg1_);
  public final static native void ElevationDataTile_size_set(long jarg1, ElevationDataTile jarg1_, long jarg2);
  public final static native long ElevationDataTile_size_get(long jarg1, ElevationDataTile jarg1_);
  public final static native void ElevationDataTile_releaseConsumableContent(long jarg1, ElevationDataTile jarg1_);
  public final static native void delete_IMapRasterBitmapTileProvider(long jarg1);
  public final static native long IMapRasterBitmapTileProvider_getTileSize(long jarg1, IMapRasterBitmapTileProvider jarg1_);
  public final static native float IMapRasterBitmapTileProvider_getTileDensityFactor(long jarg1, IMapRasterBitmapTileProvider jarg1_);
  public final static native long new_RasterBitmapTile(long jarg1, int jarg2, float jarg3, long jarg4, TileId jarg4_, int jarg5);
  public final static native void delete_RasterBitmapTile(long jarg1);
  public final static native void RasterBitmapTile_bitmap_set(long jarg1, RasterBitmapTile jarg1_, long jarg2);
  public final static native long RasterBitmapTile_bitmap_get(long jarg1, RasterBitmapTile jarg1_);
  public final static native void RasterBitmapTile_alphaChannelData_set(long jarg1, RasterBitmapTile jarg1_, int jarg2);
  public final static native int RasterBitmapTile_alphaChannelData_get(long jarg1, RasterBitmapTile jarg1_);
  public final static native void RasterBitmapTile_densityFactor_set(long jarg1, RasterBitmapTile jarg1_, float jarg2);
  public final static native float RasterBitmapTile_densityFactor_get(long jarg1, RasterBitmapTile jarg1_);
  public final static native void RasterBitmapTile_releaseConsumableContent(long jarg1, RasterBitmapTile jarg1_);
  public final static native void delete_IMapTiledSymbolsProvider(long jarg1);
  public final static native boolean IMapTiledSymbolsProvider_obtainData__SWIG_0(long jarg1, IMapTiledSymbolsProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_, long jarg5);
  public final static native boolean IMapTiledSymbolsProvider_obtainData__SWIG_1(long jarg1, IMapTiledSymbolsProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_);
  public final static native long new_TiledMapSymbolsData(long jarg1, long jarg2, TileId jarg2_, int jarg3);
  public final static native void delete_TiledMapSymbolsData(long jarg1);
  public final static native void TiledMapSymbolsData_symbolsGroups_set(long jarg1, TiledMapSymbolsData jarg1_, long jarg2);
  public final static native long TiledMapSymbolsData_symbolsGroups_get(long jarg1, TiledMapSymbolsData jarg1_);
  public final static native void TiledMapSymbolsData_releaseConsumableContent(long jarg1, TiledMapSymbolsData jarg1_);
  public final static native void delete_IMapKeyedDataProvider(long jarg1);
  public final static native long IMapKeyedDataProvider_getProvidedDataKeys(long jarg1, IMapKeyedDataProvider jarg1_);
  public final static native boolean IMapKeyedDataProvider_obtainData__SWIG_0(long jarg1, IMapKeyedDataProvider jarg1_, long jarg2, long jarg3, MapKeyedData jarg3_, long jarg4);
  public final static native boolean IMapKeyedDataProvider_obtainData__SWIG_1(long jarg1, IMapKeyedDataProvider jarg1_, long jarg2, long jarg3, MapKeyedData jarg3_);
  public final static native void delete_MapKeyedData(long jarg1);
  public final static native long MapKeyedData_key_get(long jarg1, MapKeyedData jarg1_);
  public final static native void delete_IMapKeyedSymbolsProvider(long jarg1);
  public final static native long new_KeyedMapSymbolsData(long jarg1, MapSymbolsGroup jarg1_, long jarg2);
  public final static native void delete_KeyedMapSymbolsData(long jarg1);
  public final static native void KeyedMapSymbolsData_symbolsGroup_set(long jarg1, KeyedMapSymbolsData jarg1_, long jarg2, MapSymbolsGroup jarg2_);
  public final static native long KeyedMapSymbolsData_symbolsGroup_get(long jarg1, KeyedMapSymbolsData jarg1_);
  public final static native void KeyedMapSymbolsData_releaseConsumableContent(long jarg1, KeyedMapSymbolsData jarg1_);
  public final static native int Primitiviser_PrimitiveType_Point_get();
  public final static native int Primitiviser_PrimitiveType_Polyline_get();
  public final static native int Primitiviser_PrimitiveType_Polygon_get();
  public final static native void delete_Primitiviser_PrimitivesGroup(long jarg1);
  public final static native long Primitiviser_PrimitivesGroup_sourceObject_get(long jarg1, Primitiviser.PrimitivesGroup jarg1_);
  public final static native void Primitiviser_PrimitivesGroup_polygons_set(long jarg1, Primitiviser.PrimitivesGroup jarg1_, long jarg2);
  public final static native long Primitiviser_PrimitivesGroup_polygons_get(long jarg1, Primitiviser.PrimitivesGroup jarg1_);
  public final static native void Primitiviser_PrimitivesGroup_polylines_set(long jarg1, Primitiviser.PrimitivesGroup jarg1_, long jarg2);
  public final static native long Primitiviser_PrimitivesGroup_polylines_get(long jarg1, Primitiviser.PrimitivesGroup jarg1_);
  public final static native void Primitiviser_PrimitivesGroup_points_set(long jarg1, Primitiviser.PrimitivesGroup jarg1_, long jarg2);
  public final static native long Primitiviser_PrimitivesGroup_points_get(long jarg1, Primitiviser.PrimitivesGroup jarg1_);
  public final static native void delete_Primitiviser_Primitive(long jarg1);
  public final static native long Primitiviser_Primitive_group_get(long jarg1, Primitiviser.Primitive jarg1_);
  public final static native long Primitiviser_Primitive_sourceObject_get(long jarg1, Primitiviser.Primitive jarg1_);
  public final static native int Primitiviser_Primitive_type_get(long jarg1, Primitiviser.Primitive jarg1_);
  public final static native long Primitiviser_Primitive_typeRuleIdIndex_get(long jarg1, Primitiviser.Primitive jarg1_);
  public final static native long Primitiviser_Primitive_evaluationResult_get(long jarg1, Primitiviser.Primitive jarg1_);
  public final static native void Primitiviser_Primitive_zOrder_set(long jarg1, Primitiviser.Primitive jarg1_, int jarg2);
  public final static native int Primitiviser_Primitive_zOrder_get(long jarg1, Primitiviser.Primitive jarg1_);
  public final static native void Primitiviser_Primitive_doubledArea_set(long jarg1, Primitiviser.Primitive jarg1_, long jarg2);
  public final static native long Primitiviser_Primitive_doubledArea_get(long jarg1, Primitiviser.Primitive jarg1_);
  public final static native void delete_Primitiviser_SymbolsGroup(long jarg1);
  public final static native long Primitiviser_SymbolsGroup_sourceObject_get(long jarg1, Primitiviser.SymbolsGroup jarg1_);
  public final static native void Primitiviser_SymbolsGroup_symbols_set(long jarg1, Primitiviser.SymbolsGroup jarg1_, long jarg2);
  public final static native long Primitiviser_SymbolsGroup_symbols_get(long jarg1, Primitiviser.SymbolsGroup jarg1_);
  public final static native void delete_Primitiviser_Symbol(long jarg1);
  public final static native long Primitiviser_Symbol_primitive_get(long jarg1, Primitiviser.Symbol jarg1_);
  public final static native void Primitiviser_Symbol_location31_set(long jarg1, Primitiviser.Symbol jarg1_, long jarg2, PointI jarg2_);
  public final static native long Primitiviser_Symbol_location31_get(long jarg1, Primitiviser.Symbol jarg1_);
  public final static native void Primitiviser_Symbol_order_set(long jarg1, Primitiviser.Symbol jarg1_, int jarg2);
  public final static native int Primitiviser_Symbol_order_get(long jarg1, Primitiviser.Symbol jarg1_);
  public final static native void Primitiviser_Symbol_drawAlongPath_set(long jarg1, Primitiviser.Symbol jarg1_, boolean jarg2);
  public final static native boolean Primitiviser_Symbol_drawAlongPath_get(long jarg1, Primitiviser.Symbol jarg1_);
  public final static native void Primitiviser_Symbol_intersectsWith_set(long jarg1, Primitiviser.Symbol jarg1_, long jarg2);
  public final static native long Primitiviser_Symbol_intersectsWith_get(long jarg1, Primitiviser.Symbol jarg1_);
  public final static native void delete_Primitiviser_TextSymbol(long jarg1);
  public final static native void Primitiviser_TextSymbol_value_set(long jarg1, Primitiviser.TextSymbol jarg1_, String jarg2);
  public final static native String Primitiviser_TextSymbol_value_get(long jarg1, Primitiviser.TextSymbol jarg1_);
  public final static native void Primitiviser_TextSymbol_languageId_set(long jarg1, Primitiviser.TextSymbol jarg1_, int jarg2);
  public final static native int Primitiviser_TextSymbol_languageId_get(long jarg1, Primitiviser.TextSymbol jarg1_);
  public final static native void Primitiviser_TextSymbol_drawOnPath_set(long jarg1, Primitiviser.TextSymbol jarg1_, boolean jarg2);
  public final static native boolean Primitiviser_TextSymbol_drawOnPath_get(long jarg1, Primitiviser.TextSymbol jarg1_);
  public final static native void Primitiviser_TextSymbol_verticalOffset_set(long jarg1, Primitiviser.TextSymbol jarg1_, int jarg2);
  public final static native int Primitiviser_TextSymbol_verticalOffset_get(long jarg1, Primitiviser.TextSymbol jarg1_);
  public final static native void Primitiviser_TextSymbol_color_set(long jarg1, Primitiviser.TextSymbol jarg1_, long jarg2, ColorARGB jarg2_);
  public final static native long Primitiviser_TextSymbol_color_get(long jarg1, Primitiviser.TextSymbol jarg1_);
  public final static native void Primitiviser_TextSymbol_size_set(long jarg1, Primitiviser.TextSymbol jarg1_, int jarg2);
  public final static native int Primitiviser_TextSymbol_size_get(long jarg1, Primitiviser.TextSymbol jarg1_);
  public final static native void Primitiviser_TextSymbol_shadowRadius_set(long jarg1, Primitiviser.TextSymbol jarg1_, int jarg2);
  public final static native int Primitiviser_TextSymbol_shadowRadius_get(long jarg1, Primitiviser.TextSymbol jarg1_);
  public final static native void Primitiviser_TextSymbol_shadowColor_set(long jarg1, Primitiviser.TextSymbol jarg1_, long jarg2, ColorARGB jarg2_);
  public final static native long Primitiviser_TextSymbol_shadowColor_get(long jarg1, Primitiviser.TextSymbol jarg1_);
  public final static native void Primitiviser_TextSymbol_wrapWidth_set(long jarg1, Primitiviser.TextSymbol jarg1_, int jarg2);
  public final static native int Primitiviser_TextSymbol_wrapWidth_get(long jarg1, Primitiviser.TextSymbol jarg1_);
  public final static native void Primitiviser_TextSymbol_isBold_set(long jarg1, Primitiviser.TextSymbol jarg1_, boolean jarg2);
  public final static native boolean Primitiviser_TextSymbol_isBold_get(long jarg1, Primitiviser.TextSymbol jarg1_);
  public final static native void Primitiviser_TextSymbol_minDistance_set(long jarg1, Primitiviser.TextSymbol jarg1_, long jarg2, PointI jarg2_);
  public final static native long Primitiviser_TextSymbol_minDistance_get(long jarg1, Primitiviser.TextSymbol jarg1_);
  public final static native void Primitiviser_TextSymbol_shieldResourceName_set(long jarg1, Primitiviser.TextSymbol jarg1_, String jarg2);
  public final static native String Primitiviser_TextSymbol_shieldResourceName_get(long jarg1, Primitiviser.TextSymbol jarg1_);
  public final static native void delete_Primitiviser_IconSymbol(long jarg1);
  public final static native void Primitiviser_IconSymbol_resourceName_set(long jarg1, Primitiviser.IconSymbol jarg1_, String jarg2);
  public final static native String Primitiviser_IconSymbol_resourceName_get(long jarg1, Primitiviser.IconSymbol jarg1_);
  public final static native void Primitiviser_IconSymbol_shieldResourceName_set(long jarg1, Primitiviser.IconSymbol jarg1_, String jarg2);
  public final static native String Primitiviser_IconSymbol_shieldResourceName_get(long jarg1, Primitiviser.IconSymbol jarg1_);
  public final static native void Primitiviser_IconSymbol_intersectionSize_set(long jarg1, Primitiviser.IconSymbol jarg1_, float jarg2);
  public final static native float Primitiviser_IconSymbol_intersectionSize_get(long jarg1, Primitiviser.IconSymbol jarg1_);
  public final static native long new_Primitiviser_Cache();
  public final static native void delete_Primitiviser_Cache(long jarg1);
  public final static native long Primitiviser_Cache_getPrimitivesGroups__SWIG_0(long jarg1, Primitiviser.Cache jarg1_, int jarg2);
  public final static native long Primitiviser_Cache_getSymbolsGroups__SWIG_0(long jarg1, Primitiviser.Cache jarg1_, int jarg2);
  public final static native long Primitiviser_Cache_getPrimitivesGroupsPtr__SWIG_0(long jarg1, Primitiviser.Cache jarg1_, int jarg2);
  public final static native long Primitiviser_Cache_getSymbolsGroupsPtr__SWIG_0(long jarg1, Primitiviser.Cache jarg1_, int jarg2);
  public final static native void delete_Primitiviser_PrimitivisedArea(long jarg1);
  public final static native long Primitiviser_PrimitivisedArea_area31_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native long Primitiviser_PrimitivisedArea_sizeInPixels_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native int Primitiviser_PrimitivisedArea_zoom_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native long Primitiviser_PrimitivisedArea_mapPresentationEnvironment_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_defaultBackgroundColor_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, long jarg2, ColorARGB jarg2_);
  public final static native long Primitiviser_PrimitivisedArea_defaultBackgroundColor_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_shadowRenderingMode_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, int jarg2);
  public final static native int Primitiviser_PrimitivisedArea_shadowRenderingMode_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_shadowRenderingColor_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, long jarg2, ColorARGB jarg2_);
  public final static native long Primitiviser_PrimitivisedArea_shadowRenderingColor_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_polygonAreaMinimalThreshold_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, double jarg2);
  public final static native double Primitiviser_PrimitivisedArea_polygonAreaMinimalThreshold_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_roadDensityZoomTile_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, long jarg2);
  public final static native long Primitiviser_PrimitivisedArea_roadDensityZoomTile_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_roadsDensityLimitPerTile_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, long jarg2);
  public final static native long Primitiviser_PrimitivisedArea_roadsDensityLimitPerTile_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_shadowLevelMin_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, int jarg2);
  public final static native int Primitiviser_PrimitivisedArea_shadowLevelMin_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_shadowLevelMax_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, int jarg2);
  public final static native int Primitiviser_PrimitivisedArea_shadowLevelMax_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_scale31ToPixelDivisor_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, long jarg2, PointD jarg2_);
  public final static native long Primitiviser_PrimitivisedArea_scale31ToPixelDivisor_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_primitivesGroups_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, long jarg2);
  public final static native long Primitiviser_PrimitivisedArea_primitivesGroups_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_polygons_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, long jarg2);
  public final static native long Primitiviser_PrimitivisedArea_polygons_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_polylines_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, long jarg2);
  public final static native long Primitiviser_PrimitivisedArea_polylines_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_points_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, long jarg2);
  public final static native long Primitiviser_PrimitivisedArea_points_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native void Primitiviser_PrimitivisedArea_symbolsGroups_set(long jarg1, Primitiviser.PrimitivisedArea jarg1_, long jarg2);
  public final static native long Primitiviser_PrimitivisedArea_symbolsGroups_get(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native boolean Primitiviser_PrimitivisedArea_isEmpty(long jarg1, Primitiviser.PrimitivisedArea jarg1_);
  public final static native long new_Primitiviser(long jarg1, MapPresentationEnvironment jarg1_);
  public final static native void delete_Primitiviser(long jarg1);
  public final static native long Primitiviser_environment_get(long jarg1, Primitiviser jarg1_);
  public final static native long Primitiviser_primitivise__SWIG_0(long jarg1, Primitiviser jarg1_, long jarg2, AreaI jarg2_, long jarg3, PointI jarg3_, int jarg4, int jarg5, long jarg6, long jarg7, long jarg8, long jarg9);
  public final static native long Primitiviser_primitivise__SWIG_1(long jarg1, Primitiviser jarg1_, long jarg2, AreaI jarg2_, long jarg3, PointI jarg3_, int jarg4, int jarg5, long jarg6, long jarg7, long jarg8);
  public final static native long Primitiviser_primitivise__SWIG_2(long jarg1, Primitiviser jarg1_, long jarg2, AreaI jarg2_, long jarg3, PointI jarg3_, int jarg4, int jarg5, long jarg6, long jarg7);
  public final static native long Primitiviser_primitivise__SWIG_3(long jarg1, Primitiviser jarg1_, long jarg2, AreaI jarg2_, long jarg3, PointI jarg3_, int jarg4, int jarg5, long jarg6);
  public final static native long new_BinaryMapDataProvider(long jarg1, IObfsCollection jarg1_);
  public final static native void delete_BinaryMapDataProvider(long jarg1);
  public final static native long BinaryMapDataProvider_obfsCollection_get(long jarg1, BinaryMapDataProvider jarg1_);
  public final static native int BinaryMapDataProvider_getMinZoom(long jarg1, BinaryMapDataProvider jarg1_);
  public final static native int BinaryMapDataProvider_getMaxZoom(long jarg1, BinaryMapDataProvider jarg1_);
  public final static native boolean BinaryMapDataProvider_obtainData__SWIG_0(long jarg1, BinaryMapDataProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_, long jarg5);
  public final static native boolean BinaryMapDataProvider_obtainData__SWIG_1(long jarg1, BinaryMapDataProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_);
  public final static native boolean BinaryMapDataProvider_obtainData__SWIG_2(long jarg1, BinaryMapDataProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_, long jarg5, long jarg6);
  public final static native void delete_BinaryMapDataTile(long jarg1);
  public final static native long BinaryMapDataTile_dataBlocksCache_get(long jarg1, BinaryMapDataTile jarg1_);
  public final static native long BinaryMapDataTile_referencedDataBlocks_get(long jarg1, BinaryMapDataTile jarg1_);
  public final static native int BinaryMapDataTile_tileFoundation_get(long jarg1, BinaryMapDataTile jarg1_);
  public final static native long BinaryMapDataTile_mapObjects_get(long jarg1, BinaryMapDataTile jarg1_);
  public final static native void BinaryMapDataTile_releaseConsumableContent(long jarg1, BinaryMapDataTile jarg1_);
  public final static native long new_BinaryMapPrimitivesProvider__SWIG_0(long jarg1, BinaryMapDataProvider jarg1_, long jarg2, Primitiviser jarg2_, long jarg3);
  public final static native long new_BinaryMapPrimitivesProvider__SWIG_1(long jarg1, BinaryMapDataProvider jarg1_, long jarg2, Primitiviser jarg2_);
  public final static native void delete_BinaryMapPrimitivesProvider(long jarg1);
  public final static native long BinaryMapPrimitivesProvider_dataProvider_get(long jarg1, BinaryMapPrimitivesProvider jarg1_);
  public final static native long BinaryMapPrimitivesProvider_primitiviser_get(long jarg1, BinaryMapPrimitivesProvider jarg1_);
  public final static native long BinaryMapPrimitivesProvider_tileSize_get(long jarg1, BinaryMapPrimitivesProvider jarg1_);
  public final static native int BinaryMapPrimitivesProvider_getMinZoom(long jarg1, BinaryMapPrimitivesProvider jarg1_);
  public final static native int BinaryMapPrimitivesProvider_getMaxZoom(long jarg1, BinaryMapPrimitivesProvider jarg1_);
  public final static native boolean BinaryMapPrimitivesProvider_obtainData__SWIG_0(long jarg1, BinaryMapPrimitivesProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_, long jarg5);
  public final static native boolean BinaryMapPrimitivesProvider_obtainData__SWIG_1(long jarg1, BinaryMapPrimitivesProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_);
  public final static native boolean BinaryMapPrimitivesProvider_obtainData__SWIG_2(long jarg1, BinaryMapPrimitivesProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_, long jarg5, long jarg6);
  public final static native void delete_BinaryMapPrimitivesTile(long jarg1);
  public final static native long BinaryMapPrimitivesTile_dataTile_get(long jarg1, BinaryMapPrimitivesTile jarg1_);
  public final static native long BinaryMapPrimitivesTile_primitivisedArea_get(long jarg1, BinaryMapPrimitivesTile jarg1_);
  public final static native void BinaryMapPrimitivesTile_releaseConsumableContent(long jarg1, BinaryMapPrimitivesTile jarg1_);
  public final static native long new_BinaryMapStaticSymbolsProvider(long jarg1, BinaryMapPrimitivesProvider jarg1_, long jarg2);
  public final static native void delete_BinaryMapStaticSymbolsProvider(long jarg1);
  public final static native long BinaryMapStaticSymbolsProvider_primitivesProvider_get(long jarg1, BinaryMapStaticSymbolsProvider jarg1_);
  public final static native void BinaryMapStaticSymbolsProvider_referenceTileSizeInPixels_set(long jarg1, BinaryMapStaticSymbolsProvider jarg1_, long jarg2);
  public final static native long BinaryMapStaticSymbolsProvider_referenceTileSizeInPixels_get(long jarg1, BinaryMapStaticSymbolsProvider jarg1_);
  public final static native int BinaryMapStaticSymbolsProvider_getMinZoom(long jarg1, BinaryMapStaticSymbolsProvider jarg1_);
  public final static native int BinaryMapStaticSymbolsProvider_getMaxZoom(long jarg1, BinaryMapStaticSymbolsProvider jarg1_);
  public final static native void delete_BinaryMapStaticSymbolsTile(long jarg1);
  public final static native long BinaryMapStaticSymbolsTile_dataTile_get(long jarg1, BinaryMapStaticSymbolsTile jarg1_);
  public final static native void delete_BinaryMapRasterBitmapTileProvider(long jarg1);
  public final static native long BinaryMapRasterBitmapTileProvider_primitivesProvider_get(long jarg1, BinaryMapRasterBitmapTileProvider jarg1_);
  public final static native float BinaryMapRasterBitmapTileProvider_getTileDensityFactor(long jarg1, BinaryMapRasterBitmapTileProvider jarg1_);
  public final static native long BinaryMapRasterBitmapTileProvider_getTileSize(long jarg1, BinaryMapRasterBitmapTileProvider jarg1_);
  public final static native boolean BinaryMapRasterBitmapTileProvider_obtainData__SWIG_0(long jarg1, BinaryMapRasterBitmapTileProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_, long jarg5);
  public final static native boolean BinaryMapRasterBitmapTileProvider_obtainData__SWIG_1(long jarg1, BinaryMapRasterBitmapTileProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_);
  public final static native boolean BinaryMapRasterBitmapTileProvider_obtainData__SWIG_2(long jarg1, BinaryMapRasterBitmapTileProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_, long jarg5, long jarg6);
  public final static native int BinaryMapRasterBitmapTileProvider_getMinZoom(long jarg1, BinaryMapRasterBitmapTileProvider jarg1_);
  public final static native int BinaryMapRasterBitmapTileProvider_getMaxZoom(long jarg1, BinaryMapRasterBitmapTileProvider jarg1_);
  public final static native long new_BinaryMapRasterizedTile(long jarg1, BinaryMapPrimitivesTile jarg1_, long jarg2, int jarg3, float jarg4, long jarg5, TileId jarg5_, int jarg6);
  public final static native void delete_BinaryMapRasterizedTile(long jarg1);
  public final static native long BinaryMapRasterizedTile_binaryMapTile_get(long jarg1, BinaryMapRasterizedTile jarg1_);
  public final static native long new_BinaryMapRasterBitmapTileProvider_Software(long jarg1, BinaryMapPrimitivesProvider jarg1_);
  public final static native void delete_BinaryMapRasterBitmapTileProvider_Software(long jarg1);
  public final static native long new_IOnlineTileSources_Source(String jarg1);
  public final static native void delete_IOnlineTileSources_Source(long jarg1);
  public final static native String IOnlineTileSources_Source_name_get(long jarg1, IOnlineTileSources.Source jarg1_);
  public final static native void IOnlineTileSources_Source_urlPattern_set(long jarg1, IOnlineTileSources.Source jarg1_, String jarg2);
  public final static native String IOnlineTileSources_Source_urlPattern_get(long jarg1, IOnlineTileSources.Source jarg1_);
  public final static native void IOnlineTileSources_Source_minZoom_set(long jarg1, IOnlineTileSources.Source jarg1_, int jarg2);
  public final static native int IOnlineTileSources_Source_minZoom_get(long jarg1, IOnlineTileSources.Source jarg1_);
  public final static native void IOnlineTileSources_Source_maxZoom_set(long jarg1, IOnlineTileSources.Source jarg1_, int jarg2);
  public final static native int IOnlineTileSources_Source_maxZoom_get(long jarg1, IOnlineTileSources.Source jarg1_);
  public final static native void IOnlineTileSources_Source_maxConcurrentDownloads_set(long jarg1, IOnlineTileSources.Source jarg1_, long jarg2);
  public final static native long IOnlineTileSources_Source_maxConcurrentDownloads_get(long jarg1, IOnlineTileSources.Source jarg1_);
  public final static native void IOnlineTileSources_Source_tileSize_set(long jarg1, IOnlineTileSources.Source jarg1_, long jarg2);
  public final static native long IOnlineTileSources_Source_tileSize_get(long jarg1, IOnlineTileSources.Source jarg1_);
  public final static native void IOnlineTileSources_Source_alphaChannelData_set(long jarg1, IOnlineTileSources.Source jarg1_, int jarg2);
  public final static native int IOnlineTileSources_Source_alphaChannelData_get(long jarg1, IOnlineTileSources.Source jarg1_);
  public final static native void delete_IOnlineTileSources(long jarg1);
  public final static native long IOnlineTileSources_getCollection(long jarg1, IOnlineTileSources jarg1_);
  public final static native long IOnlineTileSources_getSourceByName(long jarg1, IOnlineTileSources jarg1_, String jarg2);
  public final static native long IOnlineTileSources_createProviderFor(long jarg1, IOnlineTileSources jarg1_, String jarg2);
  public final static native long new_OnlineTileSources();
  public final static native void delete_OnlineTileSources(long jarg1);
  public final static native boolean OnlineTileSources_loadFrom__SWIG_0(long jarg1, OnlineTileSources jarg1_, long jarg2);
  public final static native boolean OnlineTileSources_loadFrom__SWIG_1(long jarg1, OnlineTileSources jarg1_, long jarg2);
  public final static native boolean OnlineTileSources_loadFrom__SWIG_2(long jarg1, OnlineTileSources jarg1_, String jarg2);
  public final static native boolean OnlineTileSources_saveTo__SWIG_0(long jarg1, OnlineTileSources jarg1_, long jarg2);
  public final static native boolean OnlineTileSources_saveTo__SWIG_1(long jarg1, OnlineTileSources jarg1_, String jarg2);
  public final static native long OnlineTileSources_getCollection(long jarg1, OnlineTileSources jarg1_);
  public final static native long OnlineTileSources_getSourceByName(long jarg1, OnlineTileSources jarg1_, String jarg2);
  public final static native boolean OnlineTileSources_addSource(long jarg1, OnlineTileSources jarg1_, long jarg2);
  public final static native boolean OnlineTileSources_removeSource(long jarg1, OnlineTileSources jarg1_, String jarg2);
  public final static native long OnlineTileSources_getBuiltIn();
  public final static native long new_OnlineRasterMapTileProvider__SWIG_0(String jarg1, String jarg2, int jarg3, int jarg4, long jarg5, long jarg6, int jarg7);
  public final static native long new_OnlineRasterMapTileProvider__SWIG_1(String jarg1, String jarg2, int jarg3, int jarg4, long jarg5, long jarg6);
  public final static native long new_OnlineRasterMapTileProvider__SWIG_2(String jarg1, String jarg2, int jarg3, int jarg4, long jarg5);
  public final static native long new_OnlineRasterMapTileProvider__SWIG_3(String jarg1, String jarg2, int jarg3, int jarg4);
  public final static native long new_OnlineRasterMapTileProvider__SWIG_4(String jarg1, String jarg2, int jarg3);
  public final static native long new_OnlineRasterMapTileProvider__SWIG_5(String jarg1, String jarg2);
  public final static native void delete_OnlineRasterMapTileProvider(long jarg1);
  public final static native String OnlineRasterMapTileProvider_name_get(long jarg1, OnlineRasterMapTileProvider jarg1_);
  public final static native String OnlineRasterMapTileProvider_pathSuffix_get(long jarg1, OnlineRasterMapTileProvider jarg1_);
  public final static native String OnlineRasterMapTileProvider_urlPattern_get(long jarg1, OnlineRasterMapTileProvider jarg1_);
  public final static native long OnlineRasterMapTileProvider_maxConcurrentDownloads_get(long jarg1, OnlineRasterMapTileProvider jarg1_);
  public final static native long OnlineRasterMapTileProvider_providerTileSize_get(long jarg1, OnlineRasterMapTileProvider jarg1_);
  public final static native int OnlineRasterMapTileProvider_alphaChannelData_get(long jarg1, OnlineRasterMapTileProvider jarg1_);
  public final static native void OnlineRasterMapTileProvider_setLocalCachePath__SWIG_0(long jarg1, OnlineRasterMapTileProvider jarg1_, long jarg2, boolean jarg3);
  public final static native void OnlineRasterMapTileProvider_setLocalCachePath__SWIG_1(long jarg1, OnlineRasterMapTileProvider jarg1_, long jarg2);
  public final static native long OnlineRasterMapTileProvider_localCachePath_get(long jarg1, OnlineRasterMapTileProvider jarg1_);
  public final static native void OnlineRasterMapTileProvider_setNetworkAccessPermission(long jarg1, OnlineRasterMapTileProvider jarg1_, boolean jarg2);
  public final static native boolean OnlineRasterMapTileProvider_networkAccessAllowed_get(long jarg1, OnlineRasterMapTileProvider jarg1_);
  public final static native float OnlineRasterMapTileProvider_getTileDensityFactor(long jarg1, OnlineRasterMapTileProvider jarg1_);
  public final static native long OnlineRasterMapTileProvider_getTileSize(long jarg1, OnlineRasterMapTileProvider jarg1_);
  public final static native boolean OnlineRasterMapTileProvider_obtainData__SWIG_0(long jarg1, OnlineRasterMapTileProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_, long jarg5);
  public final static native boolean OnlineRasterMapTileProvider_obtainData__SWIG_1(long jarg1, OnlineRasterMapTileProvider jarg1_, long jarg2, TileId jarg2_, int jarg3, long jarg4, MapTiledData jarg4_);
  public final static native int OnlineRasterMapTileProvider_getMinZoom(long jarg1, OnlineRasterMapTileProvider jarg1_);
  public final static native int OnlineRasterMapTileProvider_getMaxZoom(long jarg1, OnlineRasterMapTileProvider jarg1_);
  public final static native long ObfsCollection_SWIGSmartPtrUpcast(long jarg1);
  public final static native long ResourcesManager_LocalResource_SWIGSmartPtrUpcast(long jarg1);
  public final static native long ResourcesManager_UnmanagedResource_SWIGSmartPtrUpcast(long jarg1);
  public final static native long ResourcesManager_InstalledResource_SWIGSmartPtrUpcast(long jarg1);
  public final static native long ResourcesManager_BuiltinResource_SWIGSmartPtrUpcast(long jarg1);
  public final static native long ResourcesManager_ResourceInRepository_SWIGSmartPtrUpcast(long jarg1);
  public final static native long ResourcesManager_ObfMetadata_SWIGSmartPtrUpcast(long jarg1);
  public final static native long ResourcesManager_MapStyleMetadata_SWIGSmartPtrUpcast(long jarg1);
  public final static native long ResourcesManager_MapStylesPresetsMetadata_SWIGSmartPtrUpcast(long jarg1);
  public final static native long ResourcesManager_OnlineTileSourcesMetadata_SWIGSmartPtrUpcast(long jarg1);
  public final static native long CoreResourcesEmbeddedBundle_SWIGSmartPtrUpcast(long jarg1);
  public final static native long DefaultLogSink_SWIGSmartPtrUpcast(long jarg1);
  public final static native long QIODeviceLogSink_SWIGSmartPtrUpcast(long jarg1);
  public final static native long MapSymbolsGroup_AdditionalBillboardSymbolInstanceParameters_SWIGUpcast(long jarg1);
  public final static native long MapSymbolsGroup_AdditionalOnSurfaceSymbolInstanceParameters_SWIGUpcast(long jarg1);
  public final static native long MapSymbolsGroup_AdditionalOnPathSymbolInstanceParameters_SWIGUpcast(long jarg1);
  public final static native long MapStylesCollection_SWIGSmartPtrUpcast(long jarg1);
  public final static native long MapStylesPresetsCollection_SWIGSmartPtrUpcast(long jarg1);
  public final static native long MapStyleBuiltinValueDefinitions_MapStyleBuiltinValueDefinition_SWIGSmartPtrUpcast(long jarg1);
  public final static native long ResolvedMapStyle_Rule_SWIGUpcast(long jarg1);
  public final static native long ResolvedMapStyle_Attribute_SWIGUpcast(long jarg1);
  public final static native long ResolvedMapStyle_ParameterValueDefinition_SWIGSmartPtrUpcast(long jarg1);
  public final static native long AtlasMapRendererConfiguration_SWIGSmartPtrUpcast(long jarg1);
  public final static native long IMapTiledDataProvider_SWIGSmartPtrUpcast(long jarg1);
  public final static native long MapTiledData_SWIGSmartPtrUpcast(long jarg1);
  public final static native long IMapElevationDataProvider_SWIGSmartPtrUpcast(long jarg1);
  public final static native long ElevationDataTile_SWIGSmartPtrUpcast(long jarg1);
  public final static native long IMapRasterBitmapTileProvider_SWIGSmartPtrUpcast(long jarg1);
  public final static native long RasterBitmapTile_SWIGSmartPtrUpcast(long jarg1);
  public final static native long IMapTiledSymbolsProvider_SWIGSmartPtrUpcast(long jarg1);
  public final static native long TiledMapSymbolsData_SWIGSmartPtrUpcast(long jarg1);
  public final static native long IMapKeyedDataProvider_SWIGSmartPtrUpcast(long jarg1);
  public final static native long MapKeyedData_SWIGSmartPtrUpcast(long jarg1);
  public final static native long IMapKeyedSymbolsProvider_SWIGSmartPtrUpcast(long jarg1);
  public final static native long KeyedMapSymbolsData_SWIGSmartPtrUpcast(long jarg1);
  public final static native long Primitiviser_TextSymbol_SWIGSmartPtrUpcast(long jarg1);
  public final static native long Primitiviser_IconSymbol_SWIGSmartPtrUpcast(long jarg1);
  public final static native long BinaryMapDataProvider_SWIGSmartPtrUpcast(long jarg1);
  public final static native long BinaryMapDataTile_SWIGSmartPtrUpcast(long jarg1);
  public final static native long BinaryMapPrimitivesProvider_SWIGSmartPtrUpcast(long jarg1);
  public final static native long BinaryMapPrimitivesTile_SWIGSmartPtrUpcast(long jarg1);
  public final static native long BinaryMapStaticSymbolsProvider_SWIGSmartPtrUpcast(long jarg1);
  public final static native long BinaryMapStaticSymbolsTile_SWIGSmartPtrUpcast(long jarg1);
  public final static native long BinaryMapRasterBitmapTileProvider_SWIGSmartPtrUpcast(long jarg1);
  public final static native long BinaryMapRasterizedTile_SWIGSmartPtrUpcast(long jarg1);
  public final static native long BinaryMapRasterBitmapTileProvider_Software_SWIGSmartPtrUpcast(long jarg1);
  public final static native long OnlineTileSources_SWIGSmartPtrUpcast(long jarg1);
  public final static native long OnlineRasterMapTileProvider_SWIGSmartPtrUpcast(long jarg1);

  public static void SwigDirector_ResourcesManager_ILocalResourcesChanged_method(ResourcesManager.ILocalResourcesChanged self, long resourcesManager, long added, long removed, long updated) {
    self.method((resourcesManager == 0) ? null : new ResourcesManager(resourcesManager, false), new QStringList(added, false), new QStringList(removed, false), new QStringList(updated, false));
  }
  public static void SwigDirector_ResourcesManager_IRepositoryUpdated_method(ResourcesManager.IRepositoryUpdated self, long resourcesManager) {
    self.method((resourcesManager == 0) ? null : new ResourcesManager(resourcesManager, false));
  }
  public static long SwigDirector_ICoreResourcesProvider_getResource__SWIG_0(ICoreResourcesProvider self, String name, float displayDensityFactor, long ok) {
    return SWIGTYPE_p_QByteArray.getCPtr(self.getResource(name, displayDensityFactor, (ok == 0) ? null : new SWIGTYPE_p_bool(ok, false)));
  }
  public static long SwigDirector_ICoreResourcesProvider_getResource__SWIG_1(ICoreResourcesProvider self, String name, float displayDensityFactor) {
    return SWIGTYPE_p_QByteArray.getCPtr(self.getResource(name, displayDensityFactor));
  }
  public static long SwigDirector_ICoreResourcesProvider_getResource__SWIG_2(ICoreResourcesProvider self, String name, long ok) {
    return SWIGTYPE_p_QByteArray.getCPtr(self.getResource(name, (ok == 0) ? null : new SWIGTYPE_p_bool(ok, false)));
  }
  public static long SwigDirector_ICoreResourcesProvider_getResource__SWIG_3(ICoreResourcesProvider self, String name) {
    return SWIGTYPE_p_QByteArray.getCPtr(self.getResource(name));
  }
  public static long SwigDirector_ICoreResourcesProvider_getResourceAsBitmap__SWIG_0(ICoreResourcesProvider self, String name, float displayDensityFactor) {
    return SWIGTYPE_p_std__shared_ptrT_SkBitmap_t.getCPtr(self.getResourceAsBitmap(name, displayDensityFactor));
  }
  public static long SwigDirector_ICoreResourcesProvider_getResourceAsBitmap__SWIG_1(ICoreResourcesProvider self, String name) {
    return SWIGTYPE_p_std__shared_ptrT_SkBitmap_t.getCPtr(self.getResourceAsBitmap(name));
  }
  public static boolean SwigDirector_ICoreResourcesProvider_containsResource__SWIG_0(ICoreResourcesProvider self, String name, float displayDensityFactor) {
    return self.containsResource(name, displayDensityFactor);
  }
  public static boolean SwigDirector_ICoreResourcesProvider_containsResource__SWIG_1(ICoreResourcesProvider self, String name) {
    return self.containsResource(name);
  }
  public static void SwigDirector_MapRendererSetupOptions_IGpuWorkerThreadPrologue_method(MapRendererSetupOptions.IGpuWorkerThreadPrologue self, long mapRenderer) {
    self.method((mapRenderer == 0) ? null : new IMapRenderer(mapRenderer, false));
  }
  public static void SwigDirector_MapRendererSetupOptions_IGpuWorkerThreadEpilogue_method(MapRendererSetupOptions.IGpuWorkerThreadEpilogue self, long mapRenderer) {
    self.method((mapRenderer == 0) ? null : new IMapRenderer(mapRenderer, false));
  }
  public static void SwigDirector_MapRendererSetupOptions_IFrameUpdateRequestCallback_method(MapRendererSetupOptions.IFrameUpdateRequestCallback self, long mapRenderer) {
    self.method((mapRenderer == 0) ? null : new IMapRenderer(mapRenderer, false));
  }
  public static void SwigDirector_IMapRenderer_IFramePreparedObserver_method(IMapRenderer.IFramePreparedObserver self, long mapRenderer) {
    self.method((mapRenderer == 0) ? null : new IMapRenderer(mapRenderer, false));
  }
  public static void SwigDirector_IMapRenderer_IStateChangeObserver_method(IMapRenderer.IStateChangeObserver self, long mapRenderer, int thisChange, long allChanges) {
    self.method((mapRenderer == 0) ? null : new IMapRenderer(mapRenderer, false), MapRendererStateChange.swigToEnum(thisChange), new MapRendererStateChanges(allChanges, false));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
